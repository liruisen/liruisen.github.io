<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liruisen.github.io/"/>
  <updated>2019-05-21T05:26:34.858Z</updated>
  <id>https://liruisen.github.io/</id>
  
  <author>
    <name>liruisen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>恢复HEXO</title>
    <link href="https://liruisen.github.io/2019/05/21/2019-5-21%E6%81%A2%E5%A4%8DHexo/"/>
    <id>https://liruisen.github.io/2019/05/21/2019-5-21恢复Hexo/</id>
    <published>2019-05-21T03:43:04.000Z</published>
    <updated>2019-05-21T05:26:34.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="恢复HEXO"><a href="#恢复HEXO" class="headerlink" title="恢复HEXO"></a>恢复HEXO</h1><ol><li><p>从GitHub上下载下来源文件</p></li><li><p>在文件夹内启用 <code>cmd</code> 输入 <code>npm i hexo</code></p></li><li>执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 即可正常显示并恢复</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;恢复HEXO&quot;&gt;&lt;a href=&quot;#恢复HEXO&quot; class=&quot;headerlink&quot; title=&quot;恢复HEXO&quot;&gt;&lt;/a&gt;恢复HEXO&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从GitHub上下载下来源文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在文件夹内启用 &lt;cod
      
    
    </summary>
    
      <category term="hexo教程" scheme="https://liruisen.github.io/categories/hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="https://liruisen.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://liruisen.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liruisen.github.io/2019/05/20/hello-world/"/>
    <id>https://liruisen.github.io/2019/05/20/hello-world/</id>
    <published>2019-05-20T13:49:55.301Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<p>this is change txt.</p><p>测试批处理命令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;this is change txt.&lt;/p&gt;
&lt;p&gt;测试批处理命令&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx使用</title>
    <link href="https://liruisen.github.io/2019/03/29/2019-3-29%20Nginx/"/>
    <id>https://liruisen.github.io/2019/03/29/2019-3-29 Nginx/</id>
    <published>2019-03-29T05:12:55.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<p>为了学习下分布式技术，先学习下 Nginx 反向代理服务器，在学习过程中，顺便还巩固了计算机系统的一些知识，同时，网上关于在 Linux 上配置 Nginx 的教程已经很多了，奈何本人对 Linux 并不是很熟悉，同时现在写的网站大多还是发布在 IIS 上面的，因此本教程主要讲解在 Windows 下配置 Nginx 反向代理服务器。</p><a id="more"></a><h1 id="Windows下配置-Nginx-反向代理服务器"><a href="#Windows下配置-Nginx-反向代理服务器" class="headerlink" title="Windows下配置 Nginx 反向代理服务器"></a>Windows下配置 Nginx 反向代理服务器</h1><h2 id="什么是代理？"><a href="#什么是代理？" class="headerlink" title="什么是代理？"></a>什么是代理？</h2><p>在学习 Nginx 前，先补充下代理服务器的概念：</p><p><strong>代理服务器：</strong>一般指的是局域网内部的机器通过代理服务器发送请求到互联网上的服务器，代理服务器一般作用在客户端。应用方面比如：科学上网工具、Nginx。</p><p><strong>完整的代理请求流程：</strong>客户端首先与代理服务器创建连接，然后根据代理服务器所使用的代理协议请求对目标服务器创建连接或者获得目标服务器的指定资源。代理服务器位于客户端和 Web 服务器之间，扮演中间人的角色，HTTP 的代理服务器既是 Web 服务器又是 Web 客户端，而代理服务器则是介于客户端与 Web 服务器中间的另一台服务器。有了代理服务器之后，客户端发过来的请求不再直接发向 Web 服务器，而是发向了代理服务器，由代理服务器发出请求，取回请求资源后，返回给客户端。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/large/006CBSf2ly1g1jxpm8ttlj30ng0aswfp.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p><strong>正向代理服务器：</strong> 位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指向原始服务器，然后代理向原始服务器转交请求并将获取到的内容返回给客户端。客户端必须进行一些特别的设置才能使用正向代理。</p><p><strong>反向代理服务器：</strong> 在服务端接收客户端的请求，然后把请求分发给具体的服务器进行处理，再将服务器的响应结果返回给客户端。Nginx 就是其中一种反向代理服务器软件。</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx 是俄罗斯 Igor Sysoev 开发的一款高性能的HTTP和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器，Nginx 本身就可以托管网站，进行HTTP服务处理，也可以作为反向代理服务器使用。</p><h3 id="Nginx特点"><a href="#Nginx特点" class="headerlink" title="Nginx特点"></a>Nginx特点</h3><ul><li>跨平台：Nginx 可以在大多数 Unix 内核的系统中编译运行，也有 Windows 的移植版本。</li><li>配置简单：配置风格和程序开发相近</li><li>高并发、非阻塞：复制数据时，磁盘 I/O 的第一阶段是非阻塞的。官方测试能够支撑5万并发连接（实际生产环境中能跑到 2万~3万 并发连接数）</li><li>事件驱动：通信机制采用 epoll 模型，支撑更大的并发连接</li></ul><p>除此之外，Nginx 还有其他业务上的优势：</p><ol><li>Nginx 代理和后端 Web 服务器间无需长连接</li><li>接收用户请求是异步的，即先将用户的请求全部接收下来，再一次性发送后端 Web 服务器，极大减轻后端Web 服务器的压力</li><li>发送响应报文时，一遍接收来自后端 Web 服务器的数据，一边发送个客户端</li><li>网络依赖性低。Nginx 对网络的依赖程度非常低，从理论上来说，只要能够 Ping 通就可以实施负载均衡，而且可以有效区分内网和外网流量。</li><li>支持服务器检测。Nginx 能够根据应用服务器处理页面返回的状态码，超时信息等检测服务器是否出现故障，并及时返回错误的请求，重新提交到其他节点上。</li></ol><h2 id="Nginx事件处理机制"><a href="#Nginx事件处理机制" class="headerlink" title="Nginx事件处理机制"></a>Nginx事件处理机制</h2><p><a href="https://www.cnblogs.com/mfrbuaa/p/5333027.html" target="_blank" rel="noopener">通信机制采用epoll模型，支持更大的并发连接。</a></p><ul><li>master/worker 结构：一个 master 进程，生成多个 worker 进程</li><li>内存消耗小：并发处理大并发的请求，内存消耗非常小。在3万并发连接下，开启的1个 Nginx 进程才消耗150MB 内存（15MB*10=150MB）</li><li>成本低：Nginx 作为开源软件，可以免费使用，而硬件负载均衡交换机则需要十多万甚至几十万人民币</li><li>内置的健康检查功能：如果 Nginx Proxy 后端的某台 Web 服务器宕机了，就不会影响前端访问</li><li>节省带宽：支持GZIP压缩，可以添加浏览器本地缓存的Header头。</li><li>稳定性高：用于反向代理，宕机的概率微乎其微。</li></ul><h2 id="Nginx-内部模型"><a href="#Nginx-内部模型" class="headerlink" title="Nginx 内部模型"></a>Nginx 内部模型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006CBSf2ly1g1jyywvcf8j30fu0a674j.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>Nginx是以多进程的方式来工作的。当然 nginx 也是支持多线程的方式的,仅仅是我们主流的方式还是多进程的方式，也是nginx的默认方式。 nginx 採用多进程的方式有诸多优点。 </p><ol><li><p>nginx 在启动后，会有一个master进程和多个 worker 进程。master 进程主要用来管理 worker 进程，包括：接收来自外界的信号，向各 worker 进程发送信号，监控 worker 进程的执行状态,当 worker 进程退出后(异常情况下)，会自己主动又一次启动新的 worker 进程。而主要的网络事件。则是放在 worker 进程中来处理了 。多个 worker 进程之间是对等的，他们同等竞争来自 client 的请求。各进程互相之间是独立的 。一个请求，仅仅可能在一个 worker 进程中处理，一个 worker 进程，不可能处理其他进程的请求。</p><p>worker 进程的个数是能够设置的，一般我们会设置与机器 cpu 核数一致，这里面的原因与 nginx 的进程模型以及事件处理模型是分不开的 。</p></li><li><p>Master 接收到信号以后如何进行处理（./nginx -s reload ）?</p><p>首先 master 进程在接到信号后，会先又一次载入配置文件。然后再启动新的进程。并向全部老的进程发送信号，告诉他们能够光荣退休了。</p><p>新的进程在启动后，就開始接收新的请求，而老的进程在收到来自master的信号后，就不再接收新的请求，并且在当前进程中的全部未处理完的请求处理完毕后，再退出 .</p></li><li><p>worker 进程又是如何处理请求的呢？我们前面有提到。worker 进程之间是平等的。每一个进程，处理请求的机会也是一样的。当我们提供 80 port 的 http 服务时。一个连接请求过来，每一个进程都有可能处理这个连接，怎么做到的呢？首先，每一个 worker 进程都是从 master 进程 fork 过来，在 master 进程里面。先建立好须要 listen 的 socket 之后。然后再 fork 出多个 worker 进程，这样每一个 worker 进程都能够去 accept 这个 socket (当然不是同一个 socket ，仅仅是每一个进程的这个 socket 会监控在同一个 ip 地址与 port，这个在网络协议里面是同意的)。一般来说。当一个连接进来后。全部在 accept 在这个 socket 上面的进程。都会收到通知。而仅仅有一个进程能够 accept 这个连接，其他的则 accept 失败，这是所谓的惊群现象。</p><p>当然，nginx 也不会视而不见，所以 nginx 提供了一个 accept_mutex 这个东西，从名字上。我们能够看这是一个加在 accept 上的一把共享锁。有了这把锁之后，同一时刻，就仅仅会有一个进程在 accpet 连接，这样就不会有惊群问题了。accept_mutex 是一个可控选项，我们能够显示地关掉。默认是打开的。当一个 worker 进程在 accept 这个连接之后，就開始读取请求。解析请求。处理请求，产生数据后，再返回给 client，最后才断开连接，这样一个完整的请求就是这种了。我们能够看到，一个请求。全然由 worker 进程来处理。并且仅仅在一个 worker 进程中处理。 </p></li><li><p>nginx 采用这种进程模型有什么优点呢？採用独立的进程，能够让互相之间不会影响，一个进程退出后，其他进程还在工作，服务不会中断，master 进程则非常快又一次启动新的 worker 进程。当然，worker 进程的异常退出。肯定是程序有 bug 了，异常退出。会导致当前 worker 上的全部请求失败，只是不会影响到全部请求，所以减少了风险。当然，优点还有非常多，大家能够慢慢体会。 </p></li><li><p>有人可能要问了。nginx 採用多 worker 的方式来处理请求，每一个 worker 里面仅仅有一个主线程，那能够处理的并发数非常有限啊。多少个 worker 就能处理多少个并发。何来高并发呢？非也，这就是 nginx 的高明之处，nginx 採用了异步非堵塞的方式来处理请求。也就是说，nginx 是能够同一时候处理成千上万个请求的 .对于 IISserve r每一个请求会独占一个工作线程。当并发数上到几千时，就同一时候有几千的线程在处理请求了。</p><p>这对操作系统来说。是个不小的挑战，线程带来的内存占用非常大。线程的上下文切换带来的 cpu 开销非常大。自然性能就上不去了。而这些开销全然是没有意义的。</p><p>我们之前说过，推荐设置 worker 的个数为 cpu 的核数，在这里就非常 easy 理解了，很多其他的 worker 数，仅仅会导致进程来竞争 cpu 资源了，从而带来不必要的上下文切换。</p><p>并且，nginx 为了更好的利用多核特性，提供了 cpu 亲缘性的绑定选项。我们能够将某一个进程绑定在某一个核上。这样就不会由于进程的切换带来 cache 的失效。</p></li></ol><h2 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h2><p>负载均衡技术在现有网络结构智商提供了一种廉价、有效、透明的方法来扩展网络设备和服务器的带宽 、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。它有两方面的含义：首先，大量并发的访问或数据流量分担到多台节点设备上分别处理，减少用户等待相应的时间；其次，单个负载均衡的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后将结果汇总，返回给用户，系统处理能力得到大幅度提高。</p><h2 id="Nginx的使用"><a href="#Nginx的使用" class="headerlink" title="Nginx的使用"></a>Nginx的使用</h2><p>本文只讲解 Windows 版本的 Nginx，Linux 上的 Nginx 以后再讲</p><ol><li>到官方网站下载 Windows 版本。<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载地址</a></li><li>解压后，文件结构如下</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006CBSf2ly1g1l4r4gxpwj30gu07v0tq.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="3"><li><p>修改配置文件 。打开目录 Conf，找到 nginx 核心的配置文件 nginx.conf 进行修改。</p></li><li><p>启动服务：直接运行 nginx.exe 即可。</p></li><li><p>停止服务：</p><ol><li>启动任务管理器直接关闭进程</li><li>在 CMD 中，进入 nginx.exe 所在目录，输入 <code>nginx -s stop</code></li></ol></li><li><p>重新加载配置：</p><ol><li>重启 nginx.exe</li><li>在 CMD 中，进入 nginx.exe 所在目录，输入 <code>nginx -s reload</code></li></ol></li></ol><h2 id="Nginx的常见配置"><a href="#Nginx的常见配置" class="headerlink" title="Nginx的常见配置"></a>Nginx的常见配置</h2><p><a href="https://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">常见配置</a></p><h2 id="Nginx集群案例"><a href="#Nginx集群案例" class="headerlink" title="Nginx集群案例"></a>Nginx集群案例</h2><p>最后一步，通过一个 Demo 来演示使用 Nginx+IIS 服务器来搭建服务器集群</p><p>为了演示，创建了3个 Web 项目，然后分别部署在三台IIS服务器上，当然这个 Demo 并未做详细的业务与逻辑，只以站点的内容让其稍微有点不同以区分。而生产环境则是把相同的 Web 项目部署在不同的IIS服务器上面。</p><p><strong>创建项目</strong></p><ol><li><p>新建一个空的 MVC 项目</p></li><li><p>添加控制器 Home</p></li><li><p>添加 Index 视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">ViewBag.Title = "Index"</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第1个网站<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>发布站点1</p></li><li><p>将发布好的站点中的<code>View\Home\Index.cshtml</code>内容修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">ViewBag.Title = "Index"</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第2个网站<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获得第二个站点，并发布</p></li><li><p>继续第5步，修改内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">ViewBag.Title = "Index"</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第3个网站<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获得第三个站点，并发布</p></li><li><p>修改 Nginx 的配置文件 nginx.conf</p><p>在 http 节点上添加代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> netittest.com&#123;</span><br><span class="line">        <span class="comment">#服务器集群名字</span></span><br><span class="line">        <span class="attribute">server</span>  www.barteam.cn:<span class="number">8085</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span>  superforest.cn:<span class="number">8085</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span>  <span class="number">127.0.0.1:8087</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span>  <span class="number">127.0.0.1:8089</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 http 节点上的 server 节点、 location 节点</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8088</span>; <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  superforest.cn；<span class="comment">#你服务器的节点，如果是本地的话为127.0.0.1</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment">#root   html;</span></span><br><span class="line">            <span class="comment">#index  index.html index.htm;</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://netittest.com;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">        ·············</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动 nginx 服务，以管理员身份，运行 CMD 窗口，进入 nginx 所在目录，启动 nginx.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\nginx-1.14.2&gt;nginx.exe</span><br></pre></td></tr></table></figure></li><li><p>在浏览器输入你上面 server 中配置的 server_name 和 listen（nginx 配置文件中配置的服务器监听终结点），然后刷新浏览器，结果如下：</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx3.sinaimg.cn/large/006CBSf2ly1g1l5rcy5o0j31du07nt9a.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>请注意，浏览器地址框一直未变。</p><p>其实现原理如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/006CBSf2ly1g1l5znn6otj30ng0as3zh.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>这个 Demo 只是为了简单演示下关于通过 Nginx 搭建集群的效果，如果换到生产环境的话，需要配置的就不止上面这些，关于其他详细的配置可以查看前文中的链接，或去百度查找其他博客。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>《ASP.NET MVC 企业级实战》</p></li><li><p><a href="https://blog.csdn.net/weixin_34080951/article/details/85901056" target="_blank" rel="noopener">Nginx内部模型</a></p></li><li><a href="https://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">Nginx常见配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了学习下分布式技术，先学习下 Nginx 反向代理服务器，在学习过程中，顺便还巩固了计算机系统的一些知识，同时，网上关于在 Linux 上配置 Nginx 的教程已经很多了，奈何本人对 Linux 并不是很熟悉，同时现在写的网站大多还是发布在 IIS 上面的，因此本教程主要讲解在 Windows 下配置 Nginx 反向代理服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://liruisen.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Windows" scheme="https://liruisen.github.io/tags/Windows/"/>
    
      <category term="Nginx" scheme="https://liruisen.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>art-template 踩坑</title>
    <link href="https://liruisen.github.io/2019/03/11/2019-3-12%20art-template/"/>
    <id>https://liruisen.github.io/2019/03/11/2019-3-12 art-template/</id>
    <published>2019-03-11T03:12:55.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<p>项目需要使用 art-template 进行前端渲染，本想直接使用 Vue ，不过项目渲染不多，还是学习下 art-template吧，提前踩踩坑，避免用在项目上的时候出现问题。用的时候了解到 art-template 好像是腾讯团队开发维护的，感觉文档要糟糕，不出所料在文档上遇到一些问题。</p><a id="more"></a><h1 id="art-template使用笔记"><a href="#art-template使用笔记" class="headerlink" title="art-template使用笔记"></a>art-template使用笔记</h1><p>art-template 是前端的一个高性能 JavaScript 模板引擎，它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能。</p><p>通过下面一张图可以大致了解下 art-template 与其他方式渲染HTML页面的性能比较：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws4.sinaimg.cn/large/006CBSf2ly1g0z5zoc4zcj30ok051mx3.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>具体跟 Vue、React 这些前端主流框架比较的性能，官方并未给出数据，但是我认为只比较页面渲染能力的话，应该相差不多， Vue、React 是一整套的前端解决方案，而 art-template 只是一个 js模板引擎，二者定位和功能不同，不做详细比较，猜测 art-template 同样是使用虚拟 DOM 的方式进行页面渲染，否则能达到这样的性能，着实不容易。就学习而言，如果学习过 Vue、React，学这个非常简单，反过来学会 art-template 对学习 Vue、React也有一定帮助。</p><p>在网上查询资料的时候，发现 art-template 好像是腾讯团队开发开源的，了解到这个情况的时候，心中少不了吐槽，不可否认东西确实好用，但是架不住腾讯团队写的文档烂啊！！腾讯团队什么时候能在文档上面长点心，学学隔壁的阿里。废话不多说了，简单写下容易遇到的问题。</p><h2 id="初始化问题"><a href="#初始化问题" class="headerlink" title="初始化问题"></a>初始化问题</h2><p>关于 art-template 模板编写语法很简洁； template 对象的初始化也非常简单，只有两行代码，</p><p><strong>模板编写：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">"art-template"</span> type=<span class="string">"text/html"</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">   <span class="comment">/******/</span></span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &#123;&#123;each classInfoList&#125;&#125;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$index+<span class="number">1</span>&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;&#123;&#123;$value.Id&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.Name&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;&#123;&#123;$value.Teacher&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.Remark&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;a href="&#123;&#123;$value.Uri&#125;&#125;"&gt;删除&lt;/</span>a&gt;</span><br><span class="line">            &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>template对象初始化：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = template(<span class="string">"art-template"</span>, datas);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML = html;</span><br></pre></td></tr></table></figure><ul><li><code>&quot;art-template&quot;</code> 是定义好的模板的 id </li><li><code>datas</code> 是需要渲染的数据</li></ul><h3 id="JS执行时间、顺序问题"><a href="#JS执行时间、顺序问题" class="headerlink" title="JS执行时间、顺序问题"></a>JS执行时间、顺序问题</h3><p>在网上找到的 Demo 大多都是在 js 里面写一个假数据，用定义好的数据去初始化 template 对象，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>basic-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/template.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="javascript">&#123;&#123;<span class="keyword">if</span> isAdmin&#125;&#125; </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span></span><br><span class="line"><span class="javascript"> &#123;&#123;each list <span class="keyword">as</span> value i&#125;&#125; </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span></span><br><span class="line"><span class="undefined"> &#123;&#123;/each&#125;&#125; </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span></span><br><span class="line"><span class="javascript">&#123;&#123;/<span class="keyword">if</span>&#125;&#125; </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data = &#123; </span></span><br><span class="line"><span class="javascript"> title: <span class="string">'基本例子'</span>, </span></span><br><span class="line"><span class="javascript"> isAdmin: <span class="literal">true</span>, </span></span><br><span class="line"><span class="javascript"> list: [<span class="string">'文艺'</span>, <span class="string">'博客'</span>, <span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>] </span></span><br><span class="line"><span class="undefined">&#125;; </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> html = template(<span class="string">'test'</span>, data); </span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html; </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为以前主要使用 Vue ，Vue 是有动态渲染，但是忘记了这个并没有提到是动态渲染，同时项目开发时，数据大多通过 Ajax 从后台获取，因此在开始时，将 template 对象初始化放在了 ajax 回调函数外，因为 ajax 请求数据需要花费时间，同时js代码跟后台代码执行顺序不同，并不是按行数依次执行，所以前期导致一直渲染失败。应注意 js 代码执行顺序和执行时间的问题。</p><p><strong>完整ajax代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> datas = &#123;</span><br><span class="line">    title: <span class="string">""</span>,</span><br><span class="line">    classInfoList: []</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">"GET"</span>,</span><br><span class="line">    dataType:<span class="string">"JSON"</span>,</span><br><span class="line">    url: <span class="string">"/ClassHandler.ashx"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//原生JS序列化JSOn</span></span><br><span class="line">        <span class="comment">//datas.classInfoList = JSON.parse(data).classInfoList;</span></span><br><span class="line">        datas.classInfoList = data.classInfoList;</span><br><span class="line">        datas.title =data.title;</span><br><span class="line">        html = template(<span class="string">"art-template"</span>, datas);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML = html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="template数据初始化问题"><a href="#template数据初始化问题" class="headerlink" title="template数据初始化问题"></a>template数据初始化问题</h3><p>在上面也看到，序列化 template 对象一共传了两个参数，一个是模板的 Id，另外一个是数据。</p><p>但是这个数据有个一问题，如果返回回来的 JSON 数据是类似数组数据的话，是没有办法直接渲染的，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"Id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"班级0"</span>,</span><br><span class="line"><span class="attr">"Teacher"</span>: <span class="string">"教师0"</span>,</span><br><span class="line"><span class="attr">"Remark"</span>: <span class="string">"这是班级0的简介"</span>,</span><br><span class="line"><span class="attr">"Uri"</span>: <span class="string">"/deleteClass.ashx?id=0"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"Id"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"班级1"</span>,</span><br><span class="line"><span class="attr">"Teacher"</span>: <span class="string">"教师1"</span>,</span><br><span class="line"><span class="attr">"Remark"</span>: <span class="string">"这是班级1的简介"</span>,</span><br><span class="line"><span class="attr">"Uri"</span>: <span class="string">"/deleteClass.ashx?id=1"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"Id"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"班级2"</span>,</span><br><span class="line"><span class="attr">"Teacher"</span>: <span class="string">"教师2"</span>,</span><br><span class="line"><span class="attr">"Remark"</span>: <span class="string">"这是班级2的简介"</span>,</span><br><span class="line"><span class="attr">"Uri"</span>: <span class="string">"/deleteClass.ashx?id=2"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这个样子是没有办法直接进行渲染，需要对数据如上述代码块包装，才能正常渲染。</p><p>如果返回 JSON 数据为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"classInfoList"</span>: [&#123;</span><br><span class="line"><span class="attr">"Id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"班级0"</span>,</span><br><span class="line"><span class="attr">"Teacher"</span>: <span class="string">"教师0"</span>,</span><br><span class="line"><span class="attr">"Remark"</span>: <span class="string">"这是班级0的简介"</span>,</span><br><span class="line"><span class="attr">"Uri"</span>: <span class="string">"/deleteClass.ashx?id=0"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"Id"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"班级1"</span>,</span><br><span class="line"><span class="attr">"Teacher"</span>: <span class="string">"教师1"</span>,</span><br><span class="line"><span class="attr">"Remark"</span>: <span class="string">"这是班级1的简介"</span>,</span><br><span class="line"><span class="attr">"Uri"</span>: <span class="string">"/deleteClass.ashx?id=1"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"Id"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"Name"</span>: <span class="string">"班级2"</span>,</span><br><span class="line"><span class="attr">"Teacher"</span>: <span class="string">"教师2"</span>,</span><br><span class="line"><span class="attr">"Remark"</span>: <span class="string">"这是班级2的简介"</span>,</span><br><span class="line"><span class="attr">"Uri"</span>: <span class="string">"/deleteClass.ashx?id=2"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"软件学院班级列表"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接初始化 template 对象，并进行渲染（模板不变）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"GET"</span>,</span><br><span class="line">        dataType:<span class="string">"JSON"</span>,</span><br><span class="line">        url: <span class="string">"/ClassHandler.ashx"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            html = template(<span class="string">"art-template"</span>, data);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML = html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="template-对象初始化需注意地方"><a href="#template-对象初始化需注意地方" class="headerlink" title="template 对象初始化需注意地方"></a>template 对象初始化需注意地方</h3><p><strong>API：</strong>template(filename, content)</p><p>根据模板名渲染模板。</p><ul><li>参数：<ul><li><code>{string} filename</code></li><li><code>{Object,string} content</code></li></ul></li><li>返回值：<ul><li>如果 <code>content</code> 为 <code>Object</code>，则渲染模板并返回 <code>string</code></li><li>如果 <code>content</code> 为 <code>string</code>，则编译模板并返回 <code>function</code></li></ul></li></ul><blockquote><p>浏览器版本无法加载外部文件，<code>filename</code> 为存放模板的元素 <code>id</code></p></blockquote><p>因为渲染的时候，数据大多从后台获取，后台返回的数据可能为字符串或JSON，如果第二个参数（content）传进来的是字符串的话，没有报错，但是渲染会失败，渲染结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ws4.sinaimg.cn/large/006CBSf2ly1g0z5d7sy0wj311v09vq59.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>因此，需注意 template 初始化赋值时，数据格式是否正确。</p><h2 id="渲染问题"><a href="#渲染问题" class="headerlink" title="渲染问题"></a>渲染问题</h2><h4 id="each-循环渲染问题"><a href="#each-循环渲染问题" class="headerlink" title="each 循环渲染问题"></a>each 循环渲染问题</h4><p>关于循环的语法，官方文档上写的很简洁：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006CBSf2ly1g0z4vn89jtj30iz0dhdgb.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>默认在遍历 target 时，有两个值，value和index，其中 value 是单个对象值，index 是下标。</p><p>根据文档所写，我把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each classInfoList&#125;&#125;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$index+1&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.Id&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.Name&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.Teacher&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.Remark&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123;$value.Uri&#125;&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each classInfoList val key&#125;&#125;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$key+1&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$val.Id&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$val.Name&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$val.Teacher&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$val.Remark&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123;$val.Uri&#125;&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>浏览器在渲染的时候就报错了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006CBSf2ly1g0z51xiyhvj30ex07oaa8.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>至今不清楚，是我没领会文档说明，还是 art-template 团队忘了维护文档了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文只是 art-template js模板引擎的简单使用，还有其他几个接口、方式没有逐一介绍，在我看来这些已经能够满足基本的开发使用，至于更加复杂的渲染、渲染切换，Vue 比 art-template 省心。如有兴趣继续研究 art-template ，附上官方文档及参考博客链接。</p><hr><p><strong>参考文档：</strong></p><ul><li><a href="http://aui.github.io/art-template/zh-cn/docs/" target="_blank" rel="noopener">art-template 官方文档</a></li><li><a href="https://aui.github.io/art-template/zh-cn/docs/api.html" target="_blank" rel="noopener">art-template官方API文档</a></li><li><a href="https://www.cnblogs.com/shiyou00/p/6841801.html" target="_blank" rel="noopener">js模板引擎-art-template常用总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目需要使用 art-template 进行前端渲染，本想直接使用 Vue ，不过项目渲染不多，还是学习下 art-template吧，提前踩踩坑，避免用在项目上的时候出现问题。用的时候了解到 art-template 好像是腾讯团队开发维护的，感觉文档要糟糕，不出所料在文档上遇到一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liruisen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="art-template" scheme="https://liruisen.github.io/tags/art-template/"/>
    
      <category term="JS引擎模板" scheme="https://liruisen.github.io/tags/JS%E5%BC%95%E6%93%8E%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>问题与解决方案汇总（1）</title>
    <link href="https://liruisen.github.io/2019/01/30/2019-1-30%200.%E5%89%8D%E7%AB%AFbootstrap%E8%A1%A8%E6%A0%BC%E4%B8%8Eaxios%E8%AF%B7%E6%B1%82/"/>
    <id>https://liruisen.github.io/2019/01/30/2019-1-30 0.前端bootstrap表格与axios请求/</id>
    <published>2019-01-30T08:58:13.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中少不了踩坑，记录下各个踩坑的详情，给自己带来便利的同时，也能给其他人提供或多或少的帮助，这就再好不过了。第一期有两个问题，分别是 <code>Bootstrap 表格中插入按钮导致表格自适应失效</code> ，以及 <code>axios.js 在 Vue.js 的搭配使用过程中的 this 无法指向 Vue 对象</code> 。<br><a id="more"></a></p><h2 id="问题1-：-Bootstrap-表格中插入按钮导致表格自适应失效"><a href="#问题1-：-Bootstrap-表格中插入按钮导致表格自适应失效" class="headerlink" title="问题1 ： Bootstrap 表格中插入按钮导致表格自适应失效"></a>问题1 ： Bootstrap 表格中插入按钮导致表格自适应失效</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>昨天在写前台的时候，把前台的表格使用了Bootstrap美化了一下，立刻漂亮了很多，然后随手将表格里面的两个 <code>a</code> 标签加上了<code>btn btn-danger btn-sm</code> 、<code>btn btn-success btn-sm</code> 两个类，效果增强了很多，如图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006CBSf2ly1fzowjfng5nj3067076wec.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure></p><p>今天在写前台代码的时候，突然发现表格中的文字的行距不再居中对齐了，文本位置偏上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/mw690/006CBSf2ly1fzowrj4cxmj30h904edfx.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><h3 id="思考过程："><a href="#思考过程：" class="headerlink" title="思考过程："></a>思考过程：</h3><ol><li>应该不是什么太大的问题吧，去问下前端比较厉害的同学吧，发了信息，该过年了比较忙，没有来得及回复。</li><li>直接去调整表格里面文字的 <code>lin-hight</code> 吧，直接去浏览器定位到单元格的类，然后回编辑器进行修改。</li></ol><p><strong>解决问题的思路：</strong></p><p>想如果适应到其他设备上，写固定值的行高会不会不合适？但是好像又没有什么好的解决方案，但是灵光一动想到（吃饱了以后想到），a 标签是行内元素，button 是块级元素，给 a 标签添加上 <code>btn</code> 类的时候，是否将 a 标签由行内元素转换成块级元素？实验后发现，想法正确。不添加 <code>btn</code> 类只是单独的 a 标签，这个时候表格的自适应还是有效的；将 a 标签换成 button 标签后，表单的自适应失效。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx2.sinaimg.cn/large/006CBSf2ly1fzoxioompcj30wl03djrx.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure></p><p>既然发现了问题所在，那就容易解决了，将添加过 <code>btn btn-danger btn-sm</code> 的 a 标签由块级元素重新转换成行内元素就行了。</p><p>考虑到其他地方添加 btn 类的内容不需要转换成行内元素，因此这里解决的办法是在内联样式表中添加上这样一行，或者是写一个类，只有下面一条样式，然后将这个类放在 class 属性的最后面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-sm</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">OR</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ainline</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline;</span><br><span class="line">&#125;</span><br><span class="line">&lt;a class="btn btn-success btn-sm ainline" v-on:click=""&gt;另一种方法&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如果你有更好的解决方案，请一起沟通。</p><blockquote><p>发现问题产生原因所在，和解决问题一样重要。</p></blockquote><h2 id="问题2：axios-js-在-Vue-js-的配合中的-this"><a href="#问题2：axios-js-在-Vue-js-的配合中的-this" class="headerlink" title="问题2：axios.js 在 Vue.js 的配合中的 this"></a>问题2：axios.js 在 Vue.js 的配合中的 this</h2><p>以前在使用 Vue 向后台发送 ajax 请求的时候，使用的是 vue-resource.js ，不过现在 Vue 已经停止更新 vue-resource ，转而建议使用 axios.js ，新手注定多踩坑。</p><h3 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h3><p>在 vue-resource 向后台发送 ajax 的时候，只需要简单的一行 js 代码就能搞定，当然 axios.js 也是很简单的一行就能搞定，但是问题出在了接收数据的环节。下面请看 vue-resource 的解决方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">    userListApiUrl: <span class="string">'/Home/UserList'</span>,</span><br><span class="line">    jsondata: []</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    getRequest: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="keyword">this</span>.userListApiUrl).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.jsondata = res.body;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中，在 <code>then(function (res){}</code> 函数中，直接就能把从后台返回的数据赋值给  this.jsondata ，很简洁也很简单。</p><p>但是 axios 按照这个格式去写的话，也能拿到后台返回的数据，但是就是不能将返回的数据 赋值给 this.jsondata</p><p>(axios 的语法不再前面添加 this)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">    userListApiUrl: <span class="string">'/Home/UserList'</span>,</span><br><span class="line">    jsondata: []</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    getRequest: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         axios.get(<span class="keyword">this</span>.userListApiUrl).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">this</span>.jsondata = res.data;</span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="思考过程：-1"><a href="#思考过程：-1" class="headerlink" title="思考过程："></a>思考过程：</h3><p>出现这样的问题一直百思不得其解，难不成只能一直使用 vue-resource ？ 向困难低头不是我的作风。羊毛出在羊身上，从浏览器上寻找问题。</p><p>通过对 js 代码打断点发现了一个现象：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/large/006CBSf2ly1fzoyis80vaj30tj07d0sz.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>这个 this 好像指向了 Window 对象，回头查看两段代码，发现了区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue-resource</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="keyword">this</span>.userListApiUrl).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jsondata = res.body;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// axios</span></span><br><span class="line">axios.get(<span class="keyword">this</span>.userListApiUrl).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.jsondata = res.data;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>vue-resource 在使用前加了 this，根据代码所在的位置，可以判断出第一个和第二个 this 指向的对象都是 user 这个 Vue 对象，因此该段代码的作用域还是在new Vue() 中，这样的话里面的第三个 this 指向的也是 user 对象。</p><p>同时， vue-resource 能在前面添加 this 说明 vue-resource 集成在了 Vue 框架中，因此需要添加 this. 才能正常使用，但是在 axios 有没有集成到 Vue 框架中我并不知道啊（事后实验发现在 Vue 中通过 this 并不能访问到 axios 也可能是我的操作不对），官方的Demo就直接这样写了也没见加 this，因此在 <code>axios</code> 代码段中，第一个 this 因为作用域的原因，指向的是 user 这个 Vue 对象，但是里面的 this 因为没有集成到 Vue 同时 <code>axios.js</code> 是独立的 js 文件，作用域为顶级作用域，因此第二个 this 指向的是 Window 这个对象。</p><h3 id="解决过程："><a href="#解决过程：" class="headerlink" title="解决过程："></a>解决过程：</h3><p>既然发现问题出在哪里了，那就比较容易解决了，既然 axios 内部的作用域是顶级作用域，那么 user 对象就和其处在同一个作用域中了，修改后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">    userListApiUrl: <span class="string">'/Home/UserList'</span>,</span><br><span class="line">    jsondata: []</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    getRequest: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         axios.get(<span class="keyword">this</span>.userListApiUrl).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">               user.jsondata = res.data;</span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同时，根据 Vue 的生命周期钩子函数的执行顺序，在此位置访问 user 应该是没有问题的。</p><p>问题解决。</p><p>如果你有其他的看法，一起交流。</p><blockquote><p>多看，多实践。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发过程中少不了踩坑，记录下各个踩坑的详情，给自己带来便利的同时，也能给其他人提供或多或少的帮助，这就再好不过了。第一期有两个问题，分别是 &lt;code&gt;Bootstrap 表格中插入按钮导致表格自适应失效&lt;/code&gt; ，以及 &lt;code&gt;axios.js 在 Vue.js 的搭配使用过程中的 this 无法指向 Vue 对象&lt;/code&gt; 。&lt;br&gt;
    
    </summary>
    
      <category term="问题与解决方案" scheme="https://liruisen.github.io/categories/%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="Vue" scheme="https://liruisen.github.io/tags/Vue/"/>
    
      <category term="axios" scheme="https://liruisen.github.io/tags/axios/"/>
    
      <category term="Bootstrap" scheme="https://liruisen.github.io/tags/Bootstrap/"/>
    
      <category term="前端问题" scheme="https://liruisen.github.io/tags/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>GitHub：无限制的免费私人仓库</title>
    <link href="https://liruisen.github.io/2019/01/07/2019-1-8%20GitHub%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E5%85%8D%E8%B4%B9/"/>
    <id>https://liruisen.github.io/2019/01/07/2019-1-8 GitHub私人仓库免费/</id>
    <published>2019-01-07T08:58:13.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新的GitHub：无限制的免费私人仓库"><a href="#新的GitHub：无限制的免费私人仓库" class="headerlink" title="新的GitHub：无限制的免费私人仓库"></a>新的GitHub：无限制的免费私人仓库</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/29592817/50617647-e676f000-0eb3-11e9-992d-0eb11d29f8e0.png" alt="Github" title>                </div>                <div class="image-caption">Github</div>            </figure><p>2018年6月4日微软发布公告称，微软将以 75亿美元 的微软股票收购 GitHub ，因为过往业界对微软闭源的固有观念，使得业内并不看好 GitHub 被收购后的未来，以至于出现了一批把项目从 GitHub 迁移到其他平台的热点，但是微软已经不是十年前那个微软，如今 GitHub 也已不再是收购前的 GitHub 了。</p><p>GitHub 被收购前，国内拉取 GitHub 的仓库及推送 GitHub的仓库，速度基本上并不快，以百兆宽带来说，下行速度基本不超过 1Mb/s ，上行速度不超过 200kb/s ，收购后第一个可喜的变化就是国内地区的网络服务得到了极大的提升，上行和下行速度基本不会出现像百度网盘那样限速一样的现象，现在的速度很大都是基于带宽。</p><p>今天， GitHub 发了一篇博客，宣布了 GitHub 的又一改变：<strong>无限制的免费私有存储库。</strong> 每个存储库最多可以免费使用三个协作者，对于大部分只有自己进行代码提交的开发者来说，已经够用了！</p><p>在此之前，如果想要使用 GitHub 的免费私人仓库，有两种途径，每月支付 $7 或认证为学生账户，对非学生群体的开发者来说，每月 7美刀 的价格并不是很亲民，同时国内其他代码托管平台提供的免费私人仓库服务，也给开发者提供了不同的选择。</p><p>今天 Github 的改变固然让开发者很是欣喜，不过这一改变也会挤压国内其他代码托管平台的生存空间，具体利弊因人而异，GitHub 后续如何，敬请期待。</p><ul><li><a href="https://blog.github.com/2019-01-07-new-year-new-github/" target="_blank" rel="noopener">Github该篇博客链接</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新的GitHub：无限制的免费私人仓库&quot;&gt;&lt;a href=&quot;#新的GitHub：无限制的免费私人仓库&quot; class=&quot;headerlink&quot; title=&quot;新的GitHub：无限制的免费私人仓库&quot;&gt;&lt;/a&gt;新的GitHub：无限制的免费私人仓库&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
      <category term="随笔" scheme="https://liruisen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="新闻" scheme="https://liruisen.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%96%B0%E9%97%BB/"/>
    
    
      <category term="新闻" scheme="https://liruisen.github.io/tags/%E6%96%B0%E9%97%BB/"/>
    
  </entry>
  
  <entry>
    <title>Log4net使用</title>
    <link href="https://liruisen.github.io/2018/01/30/Log4net%E4%BD%BF%E7%94%A8/"/>
    <id>https://liruisen.github.io/2018/01/30/Log4net使用/</id>
    <published>2018-01-30T13:12:55.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<p>##Log4Net</p><blockquote><p>Log4Net是 apache 公司一款开源的日志记录组件，功能很强大，使用却很简单，本文主要讲述在 ASP.NET MVC中使用 Log4Net。本次开发环境：VS2017、 Log4Net2.0.8</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以直接在 VS NuGet 中搜索 Log4Net 进行安装，也可以去官网下载相应的dll文件</p><h2 id="Log4net配置"><a href="#Log4net配置" class="headerlink" title="Log4net配置"></a>Log4net配置</h2><p>在安装过Log4Net后需要对项目进行一些列配置（Web.Config），下面列举两种配置方案，一种是最基本的Log4Net的配置，另外一种是更加详细的配置。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--Log4net配置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"log4net"</span> <span class="attr">type</span>=<span class="string">"log4net.Config.Log4NetConfigurationSectionHandler, log4net"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Log4net配置END--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configSections</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"RollingLogFileAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">file</span> <span class="attr">value</span>=<span class="string">"test.txt"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appendToFile</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maxSizeRollBackups</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maximumFileSize</span> <span class="attr">value</span>=<span class="string">"1024KB"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rollingStyle</span> <span class="attr">value</span>=<span class="string">"Size"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">staticLogFileName</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger - %message%newline"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">leval</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingLogFileAppender"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="进一步配置"><a href="#进一步配置" class="headerlink" title="进一步配置"></a>进一步配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--Log4net配置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"log4net"</span> <span class="attr">type</span>=<span class="string">"log4net.Config.Log4NetConfigurationSectionHandler, log4net"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Log4net配置END--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configSections</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SysAppender"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"WebLogger"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里进一步限制了日志级别，只有大于等于DEBUG的时候才会记录日志--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定记录日志的方式，以滚动文件的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SysAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender,log4net"</span> &gt;</span></span><br><span class="line">      <span class="comment">&lt;!--指定存放日志文件的路径，这里放在App_Data路径下是为了安全--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">value</span>=<span class="string">"App_Data/"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日志以追加的方式记录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"AppendToFile"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"RollingStyle"</span> <span class="attr">value</span>=<span class="string">"Date"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置日志名称的生成规则--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"DatePattern"</span> <span class="attr">value</span>=<span class="string">"&amp;quot;Logs_&amp;quot;yyyyMMdd&amp;quot;.txt&amp;quot;"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日志名称是否静态：否--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"StaticLogFileName"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置日志内容格式和布局设置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout,log4net"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d [%t] %-5p %c - %m%n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Header"</span> <span class="attr">value</span>=<span class="string">"&amp;#13;&amp;#10;----------------------header--------------------------&amp;#13;&amp;#10;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Footer"</span> <span class="attr">value</span>=<span class="string">"&amp;#13;&amp;#10;----------------------footer--------------------------&amp;#13;&amp;#10;"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleApp"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.ConsoleAppender,log4net"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout,log4net"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d [%t] %-5p %c - %m%n"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li><p><code>&lt;configSections&gt;&lt;/configSections&gt;</code> 配置节中可能有多个组件的配置，这里只显示 log4net 的配置，需要根据自身的情况进行复制，不要全盘复制上去，容易影响自身原本的配置。</p></li><li><p><code>&lt;log4net&gt;&lt;log4net&gt;</code> 配置节在 <code>&lt;configSections&gt;&lt;/configSections&gt;</code>  配置节的外部/后部。</p></li><li>第二种配置有一个小问题未能解决：新的错误信息添加到旧的 TXT 文本中时，分割线未能正常显示，结尾线也未能正常显示。通过测试有个猜想，每次程序（网站）启动时，加载该配置，在此次程序运行中，只加载一次分割线，用于区分与上次程序运行时产生的异常信息，此次程序运行中后来的异常信息则不再添加分割线。如果你有其他的配置能解决这个问题或其他想法欢迎在下方留言一起讨论、学习！</li></ul><h2 id="初始化程序"><a href="#初始化程序" class="headerlink" title="初始化程序"></a>初始化程序</h2><p>在程序最开始的时候加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4net.Config.XmlConfigurator.Configure();</span><br></pre></td></tr></table></figure><p>项目用的是 ASP.MVC ，所以添加在了 Global.asax 文件中的 Appliction_Start() 方法中。</p><p>编写此行代码需要引入 log4net 的命名空间 <code>using log4net;</code></p><h2 id="打印日志信息"><a href="#打印日志信息" class="headerlink" title="打印日志信息"></a>打印日志信息</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>在需要打印日志的地方添加：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LogManager.GetLogger(<span class="keyword">typeof</span>(Program)).Debug(<span class="string">"信息"</span>);</span><br></pre></td></tr></table></figure><p>通过 LogManager.GetLogger 传递需要记录的日志类名获得这个类的 ILog  （这样在日志文件中就能看到这条日志是哪个类输出的了），然后调用 Debug 方法输出消息。因为一个类内部不止一个地方要打印日志，所以 一般把 ILog 声明为一个 static 字段：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Private <span class="keyword">static</span> ILog logger = LogManager.GetLogger(<span class="keyword">typeof</span>(Test))</span><br></pre></td></tr></table></figure><p>输出错误消息用 ILog.Error 方法，第二个参数可以传递 Exception 对象，如：</p><p><code>log.Error(&quot;***错误&quot;+ex)</code>、<code>log.Error(&quot;***错误&quot;,ex)</code></p><h3 id="生产者——消费者模式"><a href="#生产者——消费者模式" class="headerlink" title="生产者——消费者模式"></a>生产者——消费者模式</h3><p>上面基本使用有一个问题，如果是网站类或大型系统，是很多人同一时间点进行使用，但是每次写入文件的日志信息可能就会有很多条，同一时间内多条日志同时写入文本就会造成 <strong>文件并发</strong> 问题。这里通过队列的方式来记录日志。</p><p>思路：把所有产生的日志信息存放到一个队列里面，然后通过新建一个线程不断的从这个队列里面读取异常信息，然后往日志文件里面写。这个时候就不用担心多个日志信息同时写入日志文件引起的文件并发问题，这就是所谓的生产者——消费者模式。</p><h4 id="新建异常信息监控类"><a href="#新建异常信息监控类" class="headerlink" title="新建异常信息监控类"></a>新建异常信息监控类</h4><p>新建一个类 MyErrorAttribute ，继承自全局异常类 HandleErrorAttribute。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SpringLog4netDemo.Models</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyErrorAttribute</span>:<span class="title">HandleErrorAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//创建静态队列</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Queue&lt;Exception&gt; ExceptionQueue = <span class="keyword">new</span> Queue&lt;Exception&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        <span class="comment">//将异常信息写入队列中</span></span><br><span class="line">            ExceptionQueue.Enqueue(filterContext.Exception);</span><br><span class="line">            <span class="keyword">base</span>.OnException(filterContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做的目的是通过修改全局异常类拿到触发异常的信息，存储到我们准备好的队列中，用于后面的存储。</p><h4 id="在-FilterConfig-类中注册自己的异常信息监控类"><a href="#在-FilterConfig-类中注册自己的异常信息监控类" class="headerlink" title="在 FilterConfig 类中注册自己的异常信息监控类"></a>在 FilterConfig 类中注册自己的异常信息监控类</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> SpringLog4netDemo.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SpringLog4netDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span>(<span class="params">GlobalFilterCollection filters</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// filters.Add(new HandleErrorAttribute());</span></span><br><span class="line">            filters.Add(<span class="keyword">new</span> MyErrorAttribute());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 App_Start 文件夹下 有三个类 ，修改其中的 FilterConfig.cs ，将我们自己写的异常信息监控类注入。</p><h4 id="在程序入口添加线程监控"><a href="#在程序入口添加线程监控" class="headerlink" title="在程序入口添加线程监控"></a>在程序入口添加线程监控</h4><p>在 Global.asax 文件中的 Application_Start() 方法中添加一个线程，用于监控程序运行过程中是否有异常发生。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//新建线程用以检测日志</span><br><span class="line">ThreadPool.QueueUserWorkItem(o =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        if (MyErrorAttribute.ExceptionQueue.Count &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Exception ex = MyErrorAttribute.ExceptionQueue.Dequeue();</span><br><span class="line">            if (ex != null)</span><br><span class="line">            &#123;</span><br><span class="line">                ILog logger = LogManager.GetLogger(&quot;ErrorMsg&quot;);</span><br><span class="line">                logger.Error(ex.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(500);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Thread.Sleep(500);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="添加引发异常的方法进行测试"><a href="#添加引发异常的方法进行测试" class="headerlink" title="添加引发异常的方法进行测试"></a>添加引发异常的方法进行测试</h4><p>在控制器 Home 中故意添加一个引发一场的 Action 的方法 TestLog 进行测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult TestLog()</span><br><span class="line">    &#123;</span><br><span class="line">        int a = 5;</span><br><span class="line">        int b = 0;</span><br><span class="line">        int c = a / b;</span><br><span class="line">        return View();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>在浏览器进行测试：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxlax883u8j30pi0gu0t9.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>打开项目所在目录下的 App_Data文件夹</strong></p><p>打开项目所在目录下的 App_Data文件夹，可以看到已经有一个日志文件了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxlazpxg2sj30i30733yg.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>打开该文件可以看到日志信息已经保存进去</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxlb0omvxpj30tm0idgmz.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h4><p>在浏览器直接请求<code>http://localhost:5252/home/testlog</code> 时，VS会报错暂停，这个时候程序已经中断，但是还并未走到我们新注册的异常信息监控类里面的方法，也就是说异常信息还并未存到队列并且并未存储到本地。</p><p>此时VS的页面是这样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxlb5zpz2tj30jc0adaa3.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这个时候不要勾选 “<strong>SpringLog4netDemo.dll</strong>” 前面的选择框，勾选的话以后在此项目中的此类异常都会被VS屏蔽不再显示，在单独测试 Log4Net 的项目中，这个无所谓，但是如果是比较大的项目的话，这样就比较麻烦了，这个时候直接点击 <strong>继续</strong> 就可以继续运行了，或者有兴趣的话可以执行下一步查看程序执行的流程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxlbb6oowfj30kw0383yf.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>如果手滑点到那里了怎么办呢？</strong></p><p>打开 调试 &gt; 窗口 &gt; 异常设置 &gt; 选中全部选项 &gt; 检查所有选项中是否有屏蔽条件 &gt; 删除屏蔽条件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxlbj5v6iuj310608faa9.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="Log4Net相关概念"><a href="#Log4Net相关概念" class="headerlink" title="Log4Net相关概念"></a>Log4Net相关概念</h2><p>Log4Net 有3个重要的组件：loggers , appenders 和 layouts 。这3个组件协同工作使得开发者能够根据信息类型和级别（Level）记录信息，以及在运行时控制信息的格式化和信息的写入位置（如：控制台、文件、内存、数据库等）过滤器帮助这些组件控制追加器 （appender）的行为和把对象转化成字符串的对象渲染。</p><p><strong>Appender：</strong>可以寄那个日志输出到不同的地方，不同的输出目标对应不同的 Appender，如 RollingFileAppender（滚动文件）、AdoNetAppender（数据库）、SmtpAppender（邮件）等。</p><p><strong>level（级别）：</strong>标识这条日志信息的重要级别。None  &gt; Fatal &gt; ERROR &gt; WARN &gt; DEBUG &gt; INFO &gt;ALL ，设定一个 Level ，那么低于这个 Level 的日志是不会被写入到 Appender 中的。</p><p>Log4Net 还可以设定多个 Appender，可以实现同时将日志记录到文件、数据库、发送邮件等；可以设定不同Appdener 的不同 level ，可以实现普通级别都记录到文件、ERROR以上级别都发送邮件；可以实现对不同的类设定不同的 Appender；还可以自定义 Appender ，自己实现将 ERROR 信息发送短信等。</p><p>日志框架除了 Log4Net 外，还有 Enterprise Libray 中的 Logging Application Block、Apache 的 CommonLog 以及 NLog 等，使用起来都差不多。</p><p>最后附上 Log4Net  的官方文档链接</p><ul><li><a href="https://logging.apache.org/log4net/release/config-examples.html" target="_blank" rel="noopener">Apache 官方文档——配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Log4Net&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Log4Net是 apache 公司一款开源的日志记录组件，功能很强大，使用却很简单，本文主要讲述在 ASP.NET MVC中使用 Log4Net。本次开发环境：VS2017、 Log4Net2.0.8&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="ASP.NET" scheme="https://liruisen.github.io/categories/ASP-NET/"/>
    
      <category term="MVC" scheme="https://liruisen.github.io/categories/ASP-NET/MVC/"/>
    
    
      <category term="log4net" scheme="https://liruisen.github.io/tags/log4net/"/>
    
      <category term="mvc" scheme="https://liruisen.github.io/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>:Vue与其他操作DOM的第三方库搭配使用</title>
    <link href="https://liruisen.github.io/2018/01/17/Vue%E4%B8%8E%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9CDOM%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8/"/>
    <id>https://liruisen.github.io/2018/01/17/Vue与其他操作DOM的第三方库搭配使用/</id>
    <published>2018-01-17T03:14:10.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本次环境为直接引用 Vue.js（开发版） , 没有使用脚手架</p></blockquote><p>Vue  的核心思想是数据驱动 DOM，也建议我们避免直接去进行 DOM 操作，但是在很多业务里，避免不了去使用一些第三方的库，比如 popper.js、swiper.js 等，这些基于原生 JavaScript 的库都有创建和更新及销毁的完整生命周期，如果与 Vue 搭配使用的话，不可避免的会出现直接操作 DOM 的现象，这个时候需要合理的利用一些 Vue 的机制 : $nextTick</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>先来看一个简单的demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"div"</span> v-<span class="keyword">if</span>=<span class="string">"showDiv"</span>&gt;这是一段文本&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="getText"&gt;获取Div内容&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var app=new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el:"#app",</span></span><br><span class="line"><span class="regexp">    data:&#123;</span></span><br><span class="line"><span class="regexp">        showDiv:false</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods:&#123;</span></span><br><span class="line"><span class="regexp">        getText:function()&#123;</span></span><br><span class="line"><span class="regexp">            this.showDiv=true;</span></span><br><span class="line"><span class="regexp">            var text=document.getElementById('div').innerHTML;</span></span><br><span class="line"><span class="regexp">            console.log(text);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>很简单的一段代码：有一个 div ，默认使用 v-if 进行隐藏，点击按钮后，改变 v-if的值，将 div 的值显示出来，同时拿到这个值，输出到控制台上。</p><p>按照正常的思路，如果 v-if 的值是 false，直接去获取 div 的内容是获取不到的，因为此时 div 还未被创建，那么应该在点击按钮后，改变 v-if 的值为 true ，div 才会被创建，此时才能被获取到。</p><p>但是按照这种思路，控制台会抛出一个异常： <code>Cannot read property &#39;innerHTML&#39; of null</code> </p><p><img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fy9k1n6q3rj30f901pjr8.jpg" alt></p><p>意思是获取不到 div 元素。</p><h2 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h2><p>按我们正常的思路来说上述代码应该是可以获取到 div 的，但是在实际运行过程中并未能获取到，这里面就涉及到 Vue 一个重要的概念：异步更新队列</p><p>Vue 在观察到数据变化时，并不是直接更新 DOM ，而是开启一个队列，并缓冲在同一事件循环过程中发生的所有数据改变，在缓冲时会去除重复数据，从而避免不必要的计算和 DOM 操作。然后，在下一个事件循环 tick 中，Vue 刷新队列并执行实际（已去重的）工作。举个例子来说，如果使用 for 循环来动态改变数据 100 次，其实 Vue 只会应用最后一次改变，如果没有这种机制的话，DOM 就要重绘 100 次，这是一个很大的开销。</p><p>关于队列，Vue 会根据当前浏览器环境优先使用 Promise.then 和 MutationObserver ，如果都不支持，就会使用 setTimeout 代替。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>知道 Vue 异步更新 DOM 的原理后，上面的报错应该就很容易理解了。在执行 <code>this.showDiv=true;</code> 时，div 仍然没有被创建出来，直到下一个 Vue 事件循环时，才开始创建。</p><p>如果引用了其他的第三方库，需要立即创建、立即获取，这个时候就需要避开 Vue 的这种机制了，<code>$nextTick</code> 就是用来指导什么时候 DOM 更新完成的，所以上面的代码需要进行修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"div"</span> v-<span class="keyword">if</span>=<span class="string">"showDiv"</span>&gt;这是一段文本&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="getText"&gt;获取Div内容&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var app=new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el:"#app",</span></span><br><span class="line"><span class="regexp">    data:&#123;</span></span><br><span class="line"><span class="regexp">        showDiv:false</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods:&#123;</span></span><br><span class="line"><span class="regexp">        getText:function()&#123;</span></span><br><span class="line"><span class="regexp">            this.showDiv=true;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/update begin</span></span><br><span class="line"><span class="regexp">            this.$nextTick(function()&#123;</span></span><br><span class="line"><span class="regexp">                var text=document.getElementById('div').innerHTML;</span></span><br><span class="line"><span class="regexp">                console.log(text);</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/update end</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>这时再点击按钮，控制台就会打印出 div 的内容：<code>这是一段文本</code> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本次环境为直接引用 Vue.js（开发版） , 没有使用脚手架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vue  的核心思想是数据驱动 DOM，也建议我们避免直接去进行 DOM 操作，但是在很多业务里，避免不了去使用一些第三方的库，比如 popp
      
    
    </summary>
    
      <category term="前端" scheme="https://liruisen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://liruisen.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="https://liruisen.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring.Net使用</title>
    <link href="https://liruisen.github.io/2017/11/25/Spring-Net%E4%BD%BF%E7%94%A8/"/>
    <id>https://liruisen.github.io/2017/11/25/Spring-Net使用/</id>
    <published>2017-11-25T06:20:06.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring-NET-简单使用"><a href="#一、Spring-NET-简单使用" class="headerlink" title="一、Spring.NET 简单使用"></a>一、Spring.NET 简单使用</h2><blockquote><p>最近用到了 Spring.NET ,不过在第一次使用的时候就遇到了一些问题，打算整理成系列博客，不断的总结和分享。</p></blockquote><h3 id="1-什么是-Spring-NET"><a href="#1-什么是-Spring-NET" class="headerlink" title="1. 什么是 Spring.NET ?"></a>1. 什么是 Spring.NET ?</h3><p><strong>Spring</strong> 框架本是 Java 平台上一个应用非常多的、开源的框架。虽然语言是固定的，但是好的方法应该是通用的，于是 <strong>Spring 框架</strong> 就被程序员从 Java 平台搬迁到了 .NET 平台。</p><p>通过Spring.NET，我们可以用统一且透明的方式来配置应用程序。Spring.NET 的重点是为中间层提供声明式事务管理，以及一个功能齐全的 ASP.NET 扩展框架。Spring.NET 是非侵入式的，代码对框架本身不会产生任何依赖。</p><p>Spring.NET 能够提供很多方面的功能，例如：<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC" target="_blank" rel="noopener">控制反转</a>（英文缩写为IoC）、依赖注入（DI）、<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E6%96%B9%E9%9D%A2%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">面向方面编程</a>(AOP)、数据访问抽象, 以及 ASP.NET 集成等。</p><p><strong>Spring.NET 核心：</strong></p><p>Spring.Core 库是框架的基础, 提供依赖注入功能。Spring NET中大多数类库依赖或扩展了Spring.Core的功能。IObjectFactory接口提供了一个简单而优雅的工厂模式，移除了对单例和一些服务定位stub的必要。允许你将真正的程序逻辑与配置解耦。作为对IObjectFactory 的扩展，IApplicationContext接口也在Spring.Core库中。</p><h3 id="2-快速创建第一个使用-Spring-NET-的程序"><a href="#2-快速创建第一个使用-Spring-NET-的程序" class="headerlink" title="2.快速创建第一个使用 Spring.NET 的程序"></a>2.快速创建第一个使用 Spring.NET 的程序</h3><p>​    <strong>本次开发环境： VS 2017                     本次开发项目：.netframework控制台项目</strong></p><p>（1）. 使用 Nuget 安装 <strong>Spring.core</strong> 包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwjqmk5z70j30h7021t8j.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>使用 Spring.NET 需要 Spring.Core 库的支持，同时在 Nuget 中安装 Spring.Core 包，会在项目上自动引入相关的引用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwjqrqnt8dj307a037jr6.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>（2）.创建相关文件。</p><p>本次创建两个文件：IUserInfo 接口、UserInfo 实体类。使用 Spring 反射创建 UserInfo 类，使用 IUserInfo 接口调用反射创建的类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//IUserInfo接口</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Demo</span><br><span class="line">&#123;</span><br><span class="line">    public interface IUserInfo</span><br><span class="line">    &#123;</span><br><span class="line">        string ShowMss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//UserInfo实体类 </span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Demo</span><br><span class="line">&#123;</span><br><span class="line">    //实现 IUserInfo接口</span><br><span class="line">    public class UserInfo : IUserInfo</span><br><span class="line">    &#123;</span><br><span class="line">        public string ShowMss()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;Hello Spring.NET&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重要的是在配置节里面的配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sectionGroup节点一定要在紧跟着configuration下面第一个添加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sectionGroup</span> <span class="attr">name</span>=<span class="string">"spring"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--跟下面Spring.Net节点配置是一一对应关系--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"context"</span> <span class="attr">type</span>=<span class="string">"Spring.Context.Support.ContextHandler,Spring.Core"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"objects"</span> <span class="attr">type</span>=<span class="string">"Spring.Context.Support.DefaultSectionHandler,Spring.Core"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sectionGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Spring.Net节点配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--容器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span> <span class="attr">uri</span>=<span class="string">"config://spring/objects"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objects</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--objects里面放容器的所有节点--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>An example that demonstrates simple Ioc features.<span class="tag">&lt;/<span class="name">description</span>&gt;</span><span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--name 必须要唯一的，type = 类的全名称，所在的程序集--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">"UserInfo"</span> <span class="attr">type</span>=<span class="string">"Demo.UserInfo,Demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="comment">&lt;!--咱们刚才创建的UserInfo实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">spring</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">startup</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">"v4.0"</span> <span class="attr">sku</span>=<span class="string">".NETFramework,Version=v4.6"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>获取并执行：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//Program 程序入口类</span><br><span class="line">//引用 ： Spring.Context 和 Spring.Context.Support 两个命名空间</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Spring.Context;</span><br><span class="line">using Spring.Context.Support;</span><br><span class="line"></span><br><span class="line">namespace Demo</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            IApplicationContext ctx = ContextRegistry.GetContext();</span><br><span class="line">            IUserInfo userInfo = (IUserInfo)ctx.GetObject(&quot;UserInfo&quot;);</span><br><span class="line">            Console.WriteLine(userInfo.ShowMsg());</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwkk8u3kd1j309m01z0sh.jpg" alt="输出结果" title>                </div>                <div class="image-caption">输出结果</div>            </figure><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ol><li>必须安装 <strong>Spring.core</strong> 包，否则缺少环境支持。</li><li>需要正确 <strong>配置</strong> 配置文件：<ol><li><code>sectionGroup</code>节点一定要在紧跟着configuration下面第一个添加.</li><li><code>objects</code> 节点中的 <code>&lt;object&gt;&lt;/object&gt;</code>节点，<code>name=&quot;value&quot;</code>  value 值一定要唯一，<code>type =&quot;value1 , value2&quot;</code>  中 <strong>value1</strong> 是需要反射创建出来的<strong>类的全名称</strong>，<strong>value2</strong> 是<strong>该类所在的程序集</strong>。</li><li>反射创建。</li></ol></li></ol><h2 id="二、Spring-NET在MVC中的使用"><a href="#二、Spring-NET在MVC中的使用" class="headerlink" title="二、Spring.NET在MVC中的使用"></a>二、Spring.NET在MVC中的使用</h2><blockquote><p>在ASP.NET MVC中应该如何使用Spring.NET？</p></blockquote><h3 id="1-先导入dll文件"><a href="#1-先导入dll文件" class="headerlink" title="1.先导入dll文件"></a>1.先导入dll文件</h3><p>导入以下这些程序节</p><ul><li><code>Spring.core.dll</code> </li><li><code>Spring.Web.dll</code></li><li><code>Spring.Web.Extensions.dll</code></li><li><code>Spring.Web.Mvc4.dll</code></li><li><code>Common.Logging.dll</code></li></ul><p>或者直接在 NuGet 中安装 <code>Spring.Web.MVC</code> , 这个方法会直接应用相应的 dll。</p><h3 id="2-修改配置信息"><a href="#2-修改配置信息" class="headerlink" title="2.修改配置信息"></a>2.修改配置信息</h3><p>在大型的项目中，如果把所有的配置信息都放在 Web.config 文件夹，会让该文件显得非常复杂，也不利于维护和修改，这个时候可以将 Spring 的配置节分离到单独的 Xml 文档中。</p><p><strong>Web.Config文件相应配置如下</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"entityFramework"</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"</span> <span class="attr">requirePermission</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Spring.NET配置节信息--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sectionGroup</span> <span class="attr">name</span>=<span class="string">"spring"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--Spring.Net配置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"context"</span> <span class="attr">type</span>=<span class="string">"Spring.Context.Support.MvcContextHandler, Spring.Web.Mvc4"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">sectionGroup</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Spring.NET配置节信息END--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--Spring配置信息--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">spring</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Spring.Net配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span> <span class="attr">uri</span>=<span class="string">"file://~/Config/controllers.xml"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span> <span class="attr">uri</span>=<span class="string">"file://~/Config/services.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">spring</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--Spring配置信息End--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-准备分离出来的文件"><a href="#3-准备分离出来的文件" class="headerlink" title="3.准备分离出来的文件"></a>3.准备分离出来的文件</h3><p>在 Web 项目下新建一个名叫 <code>Config</code> 的文件夹，里面存放 Spring的 配置信息节。</p><p>需要注意的是，该文件夹里面的 Xml 文件的<code>复制到输出目录</code>属性需要修改为<code>始终复制</code>。这样做的原因是因为这个Xml文件是静态文件，项目生成解决方案的时候默认是不加载的，只有始终复制才会每次生成的时候加载到 Debug文件夹内。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fxk8argehaj30bs06lgli.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="4-修改controllers-xml中的配置信息"><a href="#4-修改controllers-xml中的配置信息" class="headerlink" title="4.修改controllers.xml中的配置信息"></a>4.修改controllers.xml中的配置信息</h3><p>在 controllers.xml 文件中，根节点为 <code>Objects</code> 节点，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objects</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.net"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span>  <span class="attr">type</span>=<span class="string">"LRS.OA.Web.Controllers.UserInfoController,LRS.OA.Web"</span> <span class="attr">singleton</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"UserInfoService"</span>  <span class="attr">ref</span>=<span class="string">"UserInfoService"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>type</code> : 容器内的对象所在的位置（命名空间.类）</li><li><code>singleton</code> ：是否指定单例模式，默认是单例模式</li><li><code>propeerty</code> : DI 注入的属性</li><li><code>ref</code> : propeerty 节的属性，指向的是创建的<code>&lt;object&gt;</code>节点名称，也就是创建的其他的对象节点</li></ul><p><strong>services.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objects</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.net"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">"UserInfoService"</span> <span class="attr">type</span>=<span class="string">"LRS.OA.BLL.UserInfoService,LRS.OA.BLL"</span> <span class="attr">singleton</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>###　６.修改Global文件</p><p>将 MVCApplication 继承自 SpringMvcApplication 。</p><h2 id="三、Ioc-和-DI"><a href="#三、Ioc-和-DI" class="headerlink" title="三、Ioc 和 DI"></a>三、Ioc 和 DI</h2><p>Ioc 是控制反转，目的是将实例化类这一步骤从代码中取出，让容器完成自动完成该操作。</p><p>DI是依赖注入，是容器在实例化对象时，将该实例的指定属性赋上指定的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Spring-NET-简单使用&quot;&gt;&lt;a href=&quot;#一、Spring-NET-简单使用&quot; class=&quot;headerlink&quot; title=&quot;一、Spring.NET 简单使用&quot;&gt;&lt;/a&gt;一、Spring.NET 简单使用&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="ASP.NET" scheme="https://liruisen.github.io/categories/ASP-NET/"/>
    
      <category term="MVC" scheme="https://liruisen.github.io/categories/ASP-NET/MVC/"/>
    
    
      <category term="Spring.Net" scheme="https://liruisen.github.io/tags/Spring-Net/"/>
    
      <category term="MVC" scheme="https://liruisen.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>配置Git</title>
    <link href="https://liruisen.github.io/2017/11/06/%E9%85%8D%E7%BD%AEGit/"/>
    <id>https://liruisen.github.io/2017/11/06/配置Git/</id>
    <published>2017-11-06T03:43:04.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><blockquote><p>换了电脑，但是新电脑上面并没有安装Git，重新安装后需要进行密钥和用户配置，虽然就没几行命令，但是每次去百度搜索还是费心，写成博客，以后直接找自己写的。</p></blockquote><h2 id="设置user-name和user-email信息："><a href="#设置user-name和user-email信息：" class="headerlink" title="设置user.name和user.email信息："></a>设置user.name和user.email信息：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure><h2 id="生成密钥文件："><a href="#生成密钥文件：" class="headerlink" title="生成密钥文件："></a>生成密钥文件：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure><p>回车默认不需要设置密码。</p><h2 id="把生成的密钥添加到Github上"><a href="#把生成的密钥添加到Github上" class="headerlink" title="把生成的密钥添加到Github上"></a>把生成的密钥添加到Github上</h2><ol><li><p>找到 <code>.ssh</code> 文件夹内的 <code>id_rsa.pub</code> 文件</p><p>通常文件目录为 <code>C:\Users\Administrator\.ssh</code> ,用记事本打开 id_rsa.pub 文件，复制文件中的全部内容到剪切板。</p></li><li><p>把密钥复制到 Github 的配置上</p><p><img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fx43h9cxjkj312s0c2myz.jpg" alt><img src="http://ww1.sinaimg.cn/mw690/006CBSf2ly1fx43k0hqqmj30ky0c2aa6.jpg" alt></p></li></ol><h2 id="检测Github上的ssh密钥是否添加成功："><a href="#检测Github上的ssh密钥是否添加成功：" class="headerlink" title="检测Github上的ssh密钥是否添加成功："></a>检测Github上的ssh密钥是否添加成功：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p><a href="https://sm.myapp.com/original/Development/Git-2.19.1-64-bit.exe" target="_blank" rel="noopener">Git下载地址</a>  (官网下载太慢，这是腾讯软件中心的下载链接)</p><h2 id="Git学习链接："><a href="#Git学习链接：" class="headerlink" title="Git学习链接："></a>Git学习链接：</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a></li><li><a href="http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/" target="_blank" rel="noopener">stormzhang Git系列教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置Git&quot;&gt;&lt;a href=&quot;#配置Git&quot; class=&quot;headerlink&quot; title=&quot;配置Git&quot;&gt;&lt;/a&gt;配置Git&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;换了电脑，但是新电脑上面并没有安装Git，重新安装后需要进行密钥和用户配置，虽然就没几行命
      
    
    </summary>
    
      <category term="Git教程" scheme="https://liruisen.github.io/categories/Git%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="https://liruisen.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://liruisen.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo发布文章</title>
    <link href="https://liruisen.github.io/2017/11/04/Hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>https://liruisen.github.io/2017/11/04/Hexo发布文章/</id>
    <published>2017-11-04T06:43:04.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面咱们已经搭建好了Hexo博客，并成功发布到了Github上面，但是怎么才能把新写的文章发布上去呢？</p></blockquote><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>进入你的博客目录，在 <strong>/source/_posts</strong> 文件夹下直接建立一个<code>.md</code>文件。</p><p>需要注意的是，文件内容的开头有固定的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo发布文章</span><br><span class="line">date: 2018-11-03 19:52:39</span><br><span class="line">tags:Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><code>title</code> 是文章的标题</li><li><code>date</code> 是文章的发布时间</li><li><code>tags</code> 是文章的标签</li></ul><p>后面写正文就可以了！</p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>进入博客目录，使用 <code>Git  Bash Here</code> 命令窗口，或者 Windows 自带的 <code>CMD</code> 命令窗口，输入下面命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;新建文章名称&quot;</span><br></pre></td></tr></table></figure><p>这样就会在  <strong>/source/_posts</strong> 文件夹下，新建好一个 <code>.md</code> 文件，同时该文件中的头部信息 （title、data、tags）也会给你默认生成，后面接着写正文就可以了 。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>新文章写好了，但是直接启动 hexo 博客或直接访问托管的 Github 平台的话，会发现并没有写好的文章，这是因为写好的文章现在并没有被 hexo引擎解析，同时也没有推送到 Github 上生成。</p><p>在该博客项目文件夹下进入命令行窗口 <code>Git  Bash Here</code> 和 <code>CMD</code> 都可以。</p><p><strong>输入命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li>hexo generate : 生成修改</li><li>hexo deploy    ：将生成的修改部署到 Github 上</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>部署到GitHub时，可能因为网速、被墙等原因，需要多次运行 hexo deploy ；有时候可以运行 hexo clean 后在运行上述代码。</li><li><code>.md</code> 文件不要用记事本打开，建议使用具有 <code>markdown</code>语法的程序打开，比如：<code>Typora</code> 、<code>subline text</code>、<code>notepad++</code> 等，也可以使用在线 <code>markdown</code> 编辑器 。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前面咱们已经搭建好了Hexo博客，并成功发布到了Github上面，但是怎么才能把新写的文章发布上去呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建新文章&quot;&gt;&lt;a href=&quot;#创建新文章&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Hexo教程" scheme="https://liruisen.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://liruisen.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github pages搭建私人博客</title>
    <link href="https://liruisen.github.io/2017/11/03/Hexo-Github-pages%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://liruisen.github.io/2017/11/03/Hexo-Github-pages搭建私人博客/</id>
    <published>2017-11-03T02:43:04.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近因为开始喜欢上使用 Markdown 语法来写博客，主要是因为现在各个博客网站对 Markdown 语法的支持越来越好了，本地写好一份文件，到各大博客复制粘贴即可，省去了博客搬家和手动调样式的烦恼，不会 Markdown 语法之前觉得这是什么沙雕玩意儿，现在是真香。</p></blockquote><blockquote><p>后来偶然想到，Github好像对 MarkDown 的支持也不错，我可以把写的博客源文件放在 Github 上备份一份啊！说干就干，专门开了一个仓库去保存博客源文件。前几篇写的挺舒服的，后来发现了一个问题，样式不好看，，，那啥，温饱之后开始追求精神需求量，哈哈哈哈哈，这个时候想起以前以为大佬好像提过可以在GIthub上写博客，我想，大佬的思想应该不会像我这么咸鱼吧，果不其然，还真让我找到了在 Github 上部署博客的方法，重点是还不用使用私人服务器和域名！！！真是发现新大陆了！！！撸起袖子加油干！！</p></blockquote><h2 id="为什么要创建私人博客？"><a href="#为什么要创建私人博客？" class="headerlink" title="为什么要创建私人博客？"></a>为什么要创建私人博客？</h2><p>我觉得现在身为互联网时代，有自己的个人网站其实就和有自己名片差不多，在这可以不断的记录自己的生活，总结知识，人生思考什么的。</p><p>同时对于码农来说，有自己的私人网站，有详细个人的博客，无疑会在自己工作或找工作的过程中提供帮助。</p><p>再者就是相对的自由了，现在市面上有很多的Blog系统，只要注册就可以直接在他们平台上生成一个自己的Blog，虽然省去了很多麻烦的步骤，但是命运赠送的一切欢愉，背后早已为其准备好了相应的痛苦：乱七八糟不停滚动的广告（CSXN）、简陋的UI（BoXYuan）……更不爽的就是，必须受到他们的限制与监管，只要擦边就删你文章。比如这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwxi4gux1tj30vf01rglj.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>所以搞一个完全属于自己的网站，相对来说，没那么苦逼。</p><h2 id="Github-pages-Hexo-搭建博客"><a href="#Github-pages-Hexo-搭建博客" class="headerlink" title="Github pages + Hexo 搭建博客"></a>Github pages + Hexo 搭建博客</h2><p>什么是 Github pages ？详情点击 <a href="www.baidu.com">百度</a>  ,那什么又是 Hexo 呢 ，详情还请点击  <a href="baidu.om">Hexo</a> 。</p><h3 id="安装-Git-和-Node-js"><a href="#安装-Git-和-Node-js" class="headerlink" title="安装 Git 和 Node.js"></a>安装 <code>Git</code> 和 <code>Node.js</code></h3><p>因为最终我们是需要将博客部署在 Github 上面的（免费空间，不需要域名），所以需要安装 <code>Git</code> 工具，用于把我们的博客推送到 Github 上面（当然，只是为了保持与 Github 上面的仓库保持联系的话 <code>Github Desktop</code> 也是一个不错的工具，还免去了每次换电脑之后更换 shh 公钥的麻烦），因为 Hexo 是基于 Node.js 的，所以我们也需要安装 Node.js  。</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git下载地址</a>  、 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js下载地址</a></p><p>关于二者的安装，一路 Next 下去就好了，建议装在 C 盘，环境类型相关的应用，装在其他盘里容易出问题。</p><h4 id="检查安装是否成功"><a href="#检查安装是否成功" class="headerlink" title="检查安装是否成功"></a>检查安装是否成功</h4><ol><li><p>当Git 安装完毕后，Git Bash Here 和 Git GUI Here 应该已经集成在了鼠标右键中了。</p></li><li><p>右键进入 Git Bash Here进入命令行页面，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node  -v</span><br></pre></td></tr></table></figure><p>如果可以看到 Node.js 的版本号，则证明已经安装成功。</p><p><img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwyma49vkfj30ad01ka9w.jpg" alt="Node版本号"></p></li></ol><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在任何地方，打开 Git Bash Here（Dos命令行也是可以的）</p><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近因为开始喜欢上使用 Markdown 语法来写博客，主要是因为现在各个博客网站对 Markdown 语法的支持越来越好了，本地写好一份文件，到各大博客复制粘贴即可，省去了博客搬家和手动调样式的烦恼，不会 Markdown 语法之前觉得这是什么沙
      
    
    </summary>
    
      <category term="Hexo教程" scheme="https://liruisen.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://liruisen.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>EF使用MySQL</title>
    <link href="https://liruisen.github.io/2017/10/11/EF%E4%BD%BF%E7%94%A8MySQL/"/>
    <id>https://liruisen.github.io/2017/10/11/EF使用MySQL/</id>
    <published>2017-10-11T08:58:13.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新项目需要使用MVC+EF+MySQL，以前使用的数据库都是微软的亲儿子SQL Server，所以在使用的时候基本没有遇到过什么问题，但是这次在使用MySQL的时候却一直出现问题，看到的博客很多，千篇一律还没能解决问题，整理此博客，用以记录与分享</p></blockquote><p>EF如何使用SQL Server作为数据源不再多说，不太了解的话<a href="http://superforest.cn/index.php/2018/07/01/14.html" target="_blank" rel="noopener">查看此博客</a>，下面将讲述EF如何使用MySQL ，本次开发环境为 <strong>VS2017</strong>，MySQL版本为：<strong>MySQL5.5</strong>（影响不大）</p><hr><p>[TOC]</p><h2 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1.配置环境"></a>1.配置环境</h2><p><strong>添加实体数据模型</strong><br>在项目 &gt; 添加 &gt; 新建项 &gt; 数据 &gt; ADO.NET实体数据模型 &gt; 添加 &gt; 从数据生成 &gt; 新建连接<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwhy8xs2iij30ee09bjrh.jpg" alt="选择数据源" title>                </div>                <div class="image-caption">选择数据源</div>            </figure><br>在这里可以看到，并没有MySQL的数据源。<br>这是因为没有安装MySQL与VS的集成组件<a href="https://dev.mysql.com/downloads/windows/visualstudio/" target="_blank" rel="noopener">下载地址</a>和MySQL连接组件<a href="https://dev.mysql.com/downloads/file/?id=480088" target="_blank" rel="noopener">下载地址</a>，安装完毕后就有了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwhy8xrbtnj30ee09bwel.jpg" alt="在这里插入图片描述" title>                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></p><h2 id="2-使用Nuget-安装-MySQL-Data-Entity-和-MySQL-Data"><a href="#2-使用Nuget-安装-MySQL-Data-Entity-和-MySQL-Data" class="headerlink" title="2.使用Nuget 安装 MySQL.Data.Entity 和 MySQL.Data"></a>2.使用Nuget 安装 MySQL.Data.Entity 和 MySQL.Data</h2><h3 id="划重点-这里容易出问题"><a href="#划重点-这里容易出问题" class="headerlink" title="划重点,这里容易出问题"></a><font color="red">划重点,这里容易出问题</font></h3><p><strong>常见问题</strong></p><h4 id="1-闪退"><a href="#1-闪退" class="headerlink" title="(1) .闪退"></a><font color="red">(1) .闪退</font></h4><p>在上一步，安装完 <strong>mysql-connector-net 组件</strong> 和 <strong>mysql-for-visualstudio 组件</strong>后，虽然在VS上出现了 <strong>MySQL Database</strong> 选项，但是如果直接点击<strong>继续</strong>的话，会出现闪退。这是因为没有在Nuget中安装  MySQL.Data.Entity 和 MySQL.Data 这两个包。</p><p>如同在使用 SQL Server 作为数据源的时候，需要在 Nuget 中安装 EntityFramwork 包，才能正常创建ADO.NET实体数据模型，这里也是一样，如果不安装   MySQL.Data.Entity 和 MySQL.Data 这两个包，同样无法创建以 MySQL 为数据源的 ADO.NET 实体数据模型。</p><h4 id="2-您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序……"><a href="#2-您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序……" class="headerlink" title="(2) .您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序……"></a><font color="red">(2) .您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序……</font></h4><p>上面在Nuget中，安装过 MySQL.Data.Entity 和 MySQL.Data 这两个包后，应该就可以进入下一步了，但是这里面可能还会遇到另外一个问题  <strong>您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序……</strong> 如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwhy8xtl27j30hf0hpt9o.jpg" alt="您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序" title>                </div>                <div class="image-caption">您的项目引用了最新实体框架；但是，找不到数据链接所需的与版本兼容的实体框架数据库提供程序</div>            </figure><br>这个问题困扰了我很久，在网上找到了很多关于这个问题的博客，虽然博主都给了解决方案，但是我使用那些解决方案并没有能很好的解决问题，<strong>最后找到了其他的、更简单的解决方案解决了问题</strong>。</p><p>大家还记得前面安装的 <strong>mysql-connector-net 组件</strong> 吗， MySQL官网上这个组件的版本最新的是 <strong>8.0.12</strong>，但是 VS2017 的 Nuget 包管理器中 MySQL.Data.Entity 稳定版最新版本为<strong>6.10.8</strong> MySQL.Data稳定版最新版本为 <strong>8.0.12</strong> ，出现上面的报错，就是因为这三者版本不一致,<font color="red"><strong>三者版本必须一致</strong></font> ，否则就会报这个错误！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwhy8xs1u1j30hc07saae.jpg" alt="三者版本" title>                </div>                <div class="image-caption">三者版本</div>            </figure><p>可以先添加指定版本的 MySQL.Data.Entity 这样会自动添加上对应版本的 MySQL.Data</p><p><strong>这样就可以顺利创建 ADO.NET实体数据模型了</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwhy8xux2dj30h60r4q62.jpg" alt="在这里插入图片描述" title>                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></p><h4 id="3-上述三者版本一致，但是仍然不能正常创建"><a href="#3-上述三者版本一致，但是仍然不能正常创建" class="headerlink" title=" (3) .上述三者版本一致，但是仍然不能正常创建"></a><font color="red"> (3) .上述三者版本一致，但是仍然不能正常创建</font></h4><p>检查项目的 <strong>.netframwork</strong> 版本，不同的 <strong>MySQL.Data.Entity</strong> 版本有不同的 <strong>.netframwork </strong> 最低版本支持，在 packages 文件夹或 Nuget 中查看所需支持的最低 <strong>.netframwork</strong> 版本，检测所建项目的 <strong>.netframwork</strong> 版本是否符合要求。</p><h4 id="4-给定关键字不在字典中"><a href="#4-给定关键字不在字典中" class="headerlink" title=" (4) 给定关键字不在字典中"></a><font color="red"> (4) 给定关键字不在字典中</font></h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006CBSf2ly1fwhzb4ipndj306o04za9u.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这个问题开始并没有碰到，一切正常，不过后来在别人电脑上操作，上午创建一切正常，但是下午就出现了这个问题，然后就一直无法创建，在CSDN上发现了一篇博客，解决了问题，后面为参考博客原文：</p><p>——————————————————————参考博客———————————————————————</p><p><strong>导致这个问题的原因有很多，比如数据库编码不一致、mysql connector的版本不一致等等</strong></p><p>解决办法：</p><p>1.确报VS中使用的MySQL版本（NuGet获取相应即可）与当前电脑安装的Mysql Connector版本一致；</p><p>2.关闭VS ，在系统盘中找到文件 DefaultView.SEView 并删除。</p><p>通常路径为：用户\AppData\Microsoft\VisualStudio\xx\ServerExplorer</p><p>参考原文链接：<a href="https://blog.csdn.net/iceagezh/article/details/78924154" target="_blank" rel="noopener">https://blog.csdn.net/iceagezh/article/details/78924154</a> </p><p>——————————————————————参考博客End—————————————————————</p><p>我使用的是第二种方案解决的问题，因为前面三者的版本都一致，不过 <strong>DefaultView.SEView</strong> 这个文件并不是很好找，根据博主给的地址没有找到，我使用的是 <a href="http://www.voidtools.com/downloads/" target="_blank" rel="noopener"><strong>Everything</strong> </a> 软件找到的这个文件，并删除，找到了2个这个文件，都删除了，通过删除后的VS的状态，怀疑这个文件是用来保存每次连接数据库的信息文件，因为删除过这个文件后曾经在VS中使用EF连接数据库的账号密码都清空了，不过已经能正常创建 ADO.NET 实体数据模型了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次遇到了不少的问题，但是本质上来说也算不上是特别严重的问题，VS2017是真的好用，微软对亲儿子和其他人家的儿子态度真是不同！下面是问题解决总结：</p><ol><li>安装 <strong>mysql-connector-net 组件</strong> 和 <strong>mysql-for-visualstudio </strong>组件，mysql-for-visualstudio 组件无版本要求，但是 mysql-connector-net 组件需要与后面在 Nuget 中引用的 MySQL.Data.Entity 和 MySQL.Data 版本一致。如果不安装这两个组件，在选择数据源的时候不会出现MySQL Database选项</li><li>“引用了最新的实体框架，但是找不到数据链接所需的与版本兼容的实体框架数据库提供程序…”，检查 <strong>mysql-connector-net 组件、 MySQL.Data.Entity 包、MySQL.Data 包</strong>，三者的版本是否一致</li><li>不能引用 <strong>MySQL.Data.Entity 包、MySQL.Data 包</strong>，检查项目的 .netframework 版本是否满足这两个包的最低版本需求。</li><li>“给定关键字不在字典中”，关闭VS，找到并删除 DefaultView.SEView 文件。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;新项目需要使用MVC+EF+MySQL，以前使用的数据库都是微软的亲儿子SQL Server，所以在使用的时候基本没有遇到过什么问题，但是这次在使用MySQL的时候却一直出现问题，看到的博客很多，千篇一律还没能解决问题，整理此博客，用以记录与分享&lt;
      
    
    </summary>
    
      <category term="ASP.NET" scheme="https://liruisen.github.io/categories/ASP-NET/"/>
    
      <category term="MVC" scheme="https://liruisen.github.io/categories/ASP-NET/MVC/"/>
    
    
      <category term="ASP.NET MVC" scheme="https://liruisen.github.io/tags/ASP-NET-MVC/"/>
    
      <category term="EF" scheme="https://liruisen.github.io/tags/EF/"/>
    
      <category term="MySQL" scheme="https://liruisen.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>EF框架使用</title>
    <link href="https://liruisen.github.io/2017/08/11/EF%E6%A1%86%E6%9E%B6/"/>
    <id>https://liruisen.github.io/2017/08/11/EF框架/</id>
    <published>2017-08-11T08:58:13.000Z</published>
    <updated>2019-05-20T13:49:55.301Z</updated>
    
    <content type="html"><![CDATA[<p>本博客所有案例的开发环境为 VS2013 + SQL Server 2012</p><h2 id="Entity-Framework实体框架简介"><a href="#Entity-Framework实体框架简介" class="headerlink" title="Entity Framework实体框架简介"></a>Entity Framework实体框架简介</h2><p>Entity Framework 实体框架（EF）是ADO.NET的开源对象关系映射（ORM）框架，它是 .NET Framework 的一部分，是一组支持开发面向数据的软件应用程序的技术。微软为实现 .NET 跨平台，将 EF 从 .NET 分离，使EF更加组件化。2016年6月27日，Entity Framework 7作为实体框架核心 1.0 发布，与 ASP.Net Core 1.0 和 .Net Core 1.0 一起发布，重命名为凸显出它是完全重新而不是增量升级，同时，EF7并不会取代EF6。</p><p>在EF中的实体数据模型（EDM）由以下三种模型和具有相应文件扩展名的映射文件进行定义。<br>概念架构定义语言文件（.csdl）——定义概念模型<br>存储架构定义语言文件（.ssdl）——定义存储模型<br>映射规范语言文件（.msl）——定义存储模型与概念模型之间的映射M。</p><p>实体框架 使用这些基于XML的模型和映射文件将对概念模型中的实体和关系的创建、读取、更新、和删除操作转换为数据源中的等效操作。EDM 甚至支持将概念模型中的实体映射到数据源中的存储过程。</p><p>ORM（Object Relational Mapping）框架采用元数据来描述对象一关系映射细节，元数据一般采用XML格式，并且存放在专门的对象一映射文件中。</p><p>广义上来说，ORM 可以被认为是 面向对象模型和关系型数据库的数据结构之间的相互转换。</p><p>狭义上来说，ORM 可以被认为是，基于关系型数据库的数据存储，实现了一个虚拟的面向对象的数据访问接口。理想情况下，基于这样一个面对对象的接口，持续化一个OO对象应该不需要了解任何关系型数据库存储数据的实现细节。</p><p>其他.NET ORM框架:</p><ol><li>PetaPoco : 与完备的 ORM 框架不同，PetaPoco 更加注重易用性和性能。使用 PataPoco 只需要引入一个C#文件，可以使用强类型的 POCO（Plain Old CLR Object）,并支持 T4 模板生成的类等。此外，由于 PetaPoco 是开源项目，因此添加条件来处理如空间数据等特定情况会很容易。</li><li>Dapper :<br>性能方面高于 PetaPoco，速度只稍逊于手工编码的数据访问层（DAL、Data AccessLayer），还有一些对初学者会有帮助的、位于官网上的系列博文和一些独立博文教程。</li></ol><h2 id="一、DataFirst"><a href="#一、DataFirst" class="headerlink" title="一、DataFirst"></a>一、DataFirst</h2><h3 id="使用EF，创建Model-（DataFirst）"><a href="#使用EF，创建Model-（DataFirst）" class="headerlink" title="使用EF，创建Model （DataFirst）"></a>使用EF，创建Model （DataFirst）</h3><ol><li><p>在解决方案中，创建所使用的项目。例如：ASP网站项目、WinForm窗体项目……</p></li><li><p>在新建的项目中，添加 &gt; 新建项 &gt; 数据 &gt; ADO.NET实体数据模型（.edmx）</p></li><li><p>在新建的.edmx中选择：从数据库生成（DatabaseFirst）</p></li><li><p>选择新建连接，填写连接数据库 &gt; 填写登录数据库信息 &gt; 选择或输入需要生成模型的数据库名称.</p></li><li><p>选择需要创建模型的表、视图、存储过程</p></li><li><p>点击下一步，直接生成（有些电脑可能会出现警告信息，忽视即可）。</p><p><img src="https://wx4.sinaimg.cn/large/006CBSf2ly1fzq3wum791j31ab0wtamc.jpg" alt="image"></p><p>​    （图片不清晰的话请在：浏览器上，鼠标右键，在新标签页中打开图片。即可看到清晰图片）</p></li></ol><h3 id="使用EF创建的内容"><a href="#使用EF创建的内容" class="headerlink" title="使用EF创建的内容"></a>使用EF创建的内容</h3><p><strong>创建完成后，项目会默认引入两个命名空间</strong>：EntityFramework、System.Data.Entity</p><ol><li><p>最外层为.edmx文件，EF模型设计器，展示从数据库创建的模型，包括：表名、属性（表字段）、导航属性（外键、表与表之间的对应关系）、表与表之间1对1、1对多的关系。</p></li><li><p><code>Model1.Context.tt</code>、<code>Model.Designer.cs</code>、<code>Model.edmx.diagram</code>、<code>Model1.tt</code></p><ol><li><code>Model1.Context.tt</code>：包含<code>Model1.Context.cs</code>。<code>Model1.Context.tt</code>由T4模板生成，不可更改，<code>Model1.Context.cs</code>继承自<code>DbContext</code>，包括构造方法（继承自父类的构造方法，并在此传递配置文件的数据库连接字符串）、各个表所对应的<code>Dbset&lt;T&gt;</code>类型的自动属性。</li><li><code>Model.Designer.cs</code>：自动生成，无需更改</li><li><code>Model.edmx.diagram</code>：描述edmx文件的元素信息（名称、位置……）</li><li><code>Model1.tt</code>：包含生成的Model.cs，自身由T4模板生成，无需修改</li></ol></li></ol><h3 id="使用EF进行增删改查"><a href="#使用EF进行增删改查" class="headerlink" title="使用EF进行增删改查"></a>使用EF进行增删改查</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StudentMISEntities stu = <span class="keyword">new</span> StudentMISEntities();</span><br><span class="line"><span class="comment">//IQueryable&lt;Users&gt; userInfoList=from u in stu.Users</span></span><br><span class="line"><span class="keyword">var</span> userInfoList = <span class="keyword">from</span> u <span class="keyword">in</span> stu.Users</span><br><span class="line">                   <span class="keyword">where</span> u.id == <span class="number">10</span></span><br><span class="line">                   <span class="keyword">select</span> u;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> userInfoList)<span class="comment">//EF延迟加载机制，数据用到的时候才去数据库中查询，不用的时候不去查询，提高程序性能</span></span><br><span class="line">&#123;</span><br><span class="line">      Response.Write(item.uName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Users userInfo = <span class="keyword">new</span> Users();</span><br><span class="line">userInfo.uName = <span class="string">"2333"</span>;</span><br><span class="line">userInfo.uPassword = <span class="string">"123"</span>;</span><br><span class="line">userInfo.uRole = <span class="string">"学生"</span>;</span><br><span class="line">StudentMISEntities stu = <span class="keyword">new</span> StudentMISEntities();<span class="comment">//创建EF数据操作类实例</span></span><br><span class="line">stu.Users.Add(userInfo);<span class="comment">//把数据添加到EF，并添加标记</span></span><br><span class="line">stu.SaveChanges();<span class="comment">//把数据保存到数据库</span></span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StudentMISEntities stu = <span class="keyword">new</span> StudentMISEntities();</span><br><span class="line"><span class="keyword">var</span> userInfoList = <span class="keyword">from</span> u <span class="keyword">in</span> stu.Users</span><br><span class="line">                   <span class="keyword">where</span> u.id == <span class="number">16</span></span><br><span class="line">                   <span class="keyword">select</span> u;</span><br><span class="line">Users userInfo = userInfoList.FirstOrDefault();<span class="comment">//返回第一个元素，如果没有的话，返回null</span></span><br><span class="line"><span class="keyword">if</span> (userInfo!=<span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">   userInfo.uPassword = <span class="string">"12345678"</span>;</span><br><span class="line">   stu.Entry&lt;Users&gt;(userInfo).State = System.Data.Entity.EntityState.Modified;<span class="comment">//添加修改标记</span></span><br><span class="line">   stu.SaveChanges();</span><br><span class="line">   Response.Write(userInfo.uPassword);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   Response.Write(<span class="string">"要修改的数据不存在"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> StudentMISEntities stu = <span class="keyword">new</span> StudentMISEntities();</span><br><span class="line"> <span class="keyword">var</span> userInfoList = <span class="keyword">from</span> u <span class="keyword">in</span> stu.Users</span><br><span class="line">                    <span class="keyword">where</span> u.id == <span class="number">17</span></span><br><span class="line">                    <span class="keyword">select</span> u;</span><br><span class="line">Users userInfo = userInfoList.FirstOrDefault();<span class="comment">//返回第一个元素，如果没有的话，返回null</span></span><br><span class="line"><span class="keyword">if</span> (userInfo!=<span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//stu.Users.Remove(userInfo);</span></span><br><span class="line">   stu.Entry&lt;Users&gt;(userInfo).State = System.Data.Entity.EntityState.Deleted;<span class="comment">//添加删除标记</span></span><br><span class="line">   stu.SaveChanges();</span><br><span class="line">   Response.Write(<span class="string">"已删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   Response.Write(<span class="string">"要删除的数据不存在"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、ModelFirst"><a href="#二、ModelFirst" class="headerlink" title="二、ModelFirst"></a>二、ModelFirst</h2><blockquote><p>除了支持 DatabaseFirst 外，EF 还支持 ModelFirst  、 CodeFirst，这两种类型不同于DatabaseFirst 先建立好数据库而后映射 Model ， ModelFirst 是通过 Model 映射创建数据库，而 CodeFirst 类似于 ModelFirst， 通过代码逻辑自行创建 Model 并映射数据库，但是不同于 ModelFirst 由 VS 自动创建。</p></blockquote><p>Model先行，通过Model创建数据库</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>在新建的项目中，添加 &gt; 新建项 &gt; 数据 &gt; ADO.NET实体数据模型（.edmx）</p></li><li><p>在新建的.edmx中选择：空模型（ModelFirst）</p></li><li><p>在.edmx图形化窗口中，右键 &gt; 新增 &gt; 实体</p></li><li><p>在新增实体页面 填写: 实体名（表名）、是否创建键属性（是否创建主键）、属性名称、属性类型 &gt; 确定</p></li><li><p>在.edmx图形化窗口中，在 实体 上右键 &gt; 新增 &gt;  标量属性（表字段）</p></li><li><p>选中标量属性，按快捷键 F4 或调出属性面板，可以更改标量属性的：类型、名称、长度（<strong>必改</strong>）</p></li><li><p>在多个实体，且实体之间有关联的时候，在.edmx图形化设计页面中，右键 &gt; 新建 &gt; 关联</p></li><li><p>在添加关联页面设置内容（默认即可）</p></li><li><p>在所有模型创建完毕，在.edmx页面 右键 &gt; 根据模型生成数据库</p></li><li><p>在 “生成数据库 向导” 页面，新建数据库连接 &gt; 设置连接字符串 &gt; 选择需要创建表的数据库 &gt; 点击下一步</p></li><li><p>生成数据库向导中，会生成 DDL（数据库设计语言），并另存为 .sql 文件</p></li><li><p>生成 .sql 文件后，建立的Model并没有映射到数据库引擎中，需要在 .sql 文件中，右键 &gt; 执行，即可。<br><img src="https://wx3.sinaimg.cn/large/006CBSf2ly1fzq4czg0ryj3224295e1n.jpg" alt="image"></p><p>​    （图片不清晰的话请在：浏览器上，鼠标右键，在新标签页中打开图片。即可看到清晰图片）</p></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li>新建 <strong>标量属性</strong> 后，需要在属性面板对 标量属性的 <strong>长度</strong> 和 <strong>数据类型</strong> 进行限制，string 长度即为数据库内字段的 NVarChar 的长度 。</li><li>在 .edmx 图形化页面 <strong>新建完实体</strong> 后，解决方案里面可能没有生成 Model.tt 文件（包含 Model 模型.cs），这时候在 .edmx 图形化页面: 右键 &gt; 添加代码生成项 &gt; 数据 &gt;EF 版本.x DbContext 生成器 &gt; 确定</li><li>关于实体更新 <ol><li>需映射数据库更新 </li><li>更新实体后，VS 在生成的DDL数据库脚本中，是<strong>把原先创建好的表全部删除，再重新创建</strong>更新后的实体所对应的表，如果原数据表中存在数据，数据也会一并删除。（2）. 在更新数据库时一定要谨慎，做好数据库备份，同时如果只是小的改动（扩大字符长度），手动在数据库里 修改即可，或者仅把更新的sql脚本部分拷贝出来，复制到SQL Server执行</li></ol></li></ol><h2 id="三、CodeFirst"><a href="#三、CodeFirst" class="headerlink" title="三、CodeFirst"></a>三、CodeFirst</h2><p>先写代码，通过代码创建实体，映射数据库</p><h3 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>新建项目，在项目里面通过 NuGet程序包 安装EntityFramework（该操作会自动引入EntityFramework以及相对应的命名空间）</p></li><li><p>在配置文件里面添加连接字符串</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"CodeFirstDemo"</span> <span class="attr">connectionString</span>=<span class="string">"server=.;uid=用户;pwd=密码;database=Test2"</span> <span class="attr">providerName</span>=<span class="string">"System.Data.SqlClient"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建类 .cs ，设置类的属性、类之间的关联</p></li></ol><p><strong>studentInfo</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirstDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> stuName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DateTime subTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立联系</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> ClassInfo classInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>classInfo</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirstDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Id添加主键标识</span></span><br><span class="line">        [<span class="meta">Key</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据类型为NVarChar（32），且不可为空</span></span><br><span class="line">        [<span class="meta">StringLength(32)</span>]</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> clsName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> DateTime sbuTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立联系</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> ICollection&lt;StudentInfo&gt; sutdentInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建 EF数据操作类 codeFirstDbcontex </li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity.ModelConfiguration.Conventions;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirst</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">codeFirstDbcontext</span>:<span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用父类的构造方法，并传递 配置文件内的 数据库连接字符串 字段</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">codeFirstDbcontext</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params"><span class="string">"name=connStr"</span></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;ClassInfo&gt; ClassInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;StudentInfo&gt; Student &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//实体模型映射成表的时候执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//移除 将表名设置为实体类型名称的复数版本的约定</span></span><br><span class="line">            <span class="comment">//模型名映射在数据库表的时候，可能会出现复数（s）</span></span><br><span class="line">            modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>执行</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">codeFirstDbcontext db = <span class="keyword">new</span> codeFirstDbcontext();</span><br><span class="line"><span class="comment">//如果 数据库中不存在库，则创建</span></span><br><span class="line">db.Database.CreateIfNotExists();</span><br><span class="line">ClassInfo clsInfo = <span class="keyword">new</span> ClassInfo();</span><br><span class="line">clsInfo.clsName = <span class="string">"16级.NET班"</span>;</span><br><span class="line">clsInfo.sbuTime = DateTime.Now;</span><br><span class="line">db.ClassInfo.Add(clsInfo);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx2.sinaimg.cn/large/006CBSf2ly1fzq4ak1dgqj32j21e04cw.jpg" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><p>​    （图片不清晰的话请在：浏览器上，鼠标右键，在新标签页中打开图片。即可看到清晰图片）</p><h2 id="四、Linq查询和Lambda查询"><a href="#四、Linq查询和Lambda查询" class="headerlink" title="四、Linq查询和Lambda查询"></a>四、Linq查询和Lambda查询</h2><h3 id="Linq查询"><a href="#Linq查询" class="headerlink" title="Linq查询"></a>Linq查询</h3><h4 id="Linq查询全部列并降序"><a href="#Linq查询全部列并降序" class="headerlink" title="Linq查询全部列并降序"></a>Linq查询全部列并降序</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoList = <span class="keyword">from</span> u <span class="keyword">in</span> db.Users</span><br><span class="line">               <span class="keyword">where</span> u.id &gt; <span class="number">8</span></span><br><span class="line">               <span class="keyword">orderby</span> u.id <span class="keyword">ascending</span>  <span class="comment">//descending降序</span></span><br><span class="line">               <span class="keyword">select</span> u;</span><br><span class="line"><span class="keyword">foreach</span> (Users userInfo <span class="keyword">in</span> userInfoList)</span><br><span class="line">&#123;</span><br><span class="line">  Response.Write(userInfo.id + <span class="string">":"</span> + userInfo.uName + <span class="string">"&lt;hr/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Linq分页"><a href="#Linq分页" class="headerlink" title="Linq分页"></a>Linq分页</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pageIndex = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> pageSize = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> userInfoList = (<span class="keyword">from</span> u <span class="keyword">in</span> db.Users</span><br><span class="line">                    <span class="keyword">where</span> u.id &gt; <span class="number">8</span></span><br><span class="line">                    <span class="keyword">orderby</span> u.id <span class="keyword">ascending</span>  <span class="comment">//descending降序</span></span><br><span class="line">                    <span class="keyword">select</span> u).Skip((pageIndex - <span class="number">1</span>) * pageSize).Take(pageSize);</span><br><span class="line"><span class="keyword">foreach</span> (Users userInfo <span class="keyword">in</span> userInfoList)</span><br><span class="line">&#123;</span><br><span class="line">    Response.Write(userInfo.id + <span class="string">":"</span> + userInfo.uName + <span class="string">"&lt;hr/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Linq查询部分列"><a href="#Linq查询部分列" class="headerlink" title="Linq查询部分列"></a>Linq查询部分列</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoList = <span class="keyword">from</span> u <span class="keyword">in</span> db.Users</span><br><span class="line">                <span class="keyword">where</span> u.id &gt; <span class="number">8</span></span><br><span class="line">                <span class="comment">//使用匿名类,设置两个字段UName，UPwd</span></span><br><span class="line">                <span class="keyword">select</span> <span class="keyword">new</span> &#123; UName = u.uName, UPwd = u.uPassword &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span>  userInfo <span class="keyword">in</span> userInfoList)</span><br><span class="line">&#123;</span><br><span class="line"> Response.Write(userInfo.UName+<span class="string">":"</span>+userInfo.UPwd+<span class="string">"&lt;hr/&gt;"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda查询"><a href="#Lambda查询" class="headerlink" title="Lambda查询"></a>Lambda查询</h3><h4 id="过滤筛选"><a href="#过滤筛选" class="headerlink" title="过滤筛选"></a>过滤筛选</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoList = db.Users.Where&lt;Users&gt;(u =&gt; u.id &gt; <span class="number">8</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> userInfo <span class="keyword">in</span> userInfoList)</span><br><span class="line">&#123;</span><br><span class="line">     Response.Write(userInfo.id + <span class="string">":"</span> + userInfo.uName + <span class="string">"&lt;hr/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda升序排序排序查询"><a href="#Lambda升序排序排序查询" class="headerlink" title="Lambda升序排序排序查询"></a>Lambda升序排序排序查询</h4><p><strong>对Id进行升序排序排序</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoList = db.Users.Where&lt;Users&gt;(U =&gt; <span class="literal">true</span>).OrderBy&lt;Users, <span class="keyword">int</span>&gt;(u =&gt; u.id);</span><br></pre></td></tr></table></figure><p><strong>对Id进行降序排序排序</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoList = db.Users.Where&lt;Users&gt;(U =&gt; <span class="literal">true</span>).OrderByDescending&lt;Users, <span class="keyword">int</span>&gt;(u =&gt; u.id);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> userInfo <span class="keyword">in</span> userInfoList)</span><br><span class="line">&#123;</span><br><span class="line">    Response.Write(userInfo.id + <span class="string">":"</span> + userInfo.uName + <span class="string">"&lt;hr/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在以用户名为前提倒序排序的基础上，如果用户名相同，则使用Id作为依据对用户名相同的用户进行倒序排序</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoList = db.Users.Where&lt;Users&gt;(u =&gt; <span class="literal">true</span>).OrderByDescending(u =&gt; u.uName).ThenByDescending&lt;Users,<span class="keyword">int</span>&gt;(u =&gt; u.id);</span><br></pre></td></tr></table></figure><h4 id="Lambda分页查询"><a href="#Lambda分页查询" class="headerlink" title="Lambda分页查询"></a>Lambda分页查询</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pageIndex = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> pageSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> userInfoList = db.Users.Where&lt;Users&gt;(U =&gt; <span class="literal">true</span>).OrderByDescending&lt;Users, <span class="keyword">int</span>&gt;(u =&gt; u.id).Skip&lt;Users&gt;((pageIndex<span class="number">-1</span>)*pageSize).Take&lt;Users&gt;(pageSize);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> userInfo <span class="keyword">in</span> userInfoList)</span><br><span class="line">&#123;</span><br><span class="line">    Response.Write(userInfo.id + <span class="string">":"</span> + userInfo.uName + <span class="string">"&lt;hr/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本博客所有案例的开发环境为 VS2013 + SQL Server 2012&lt;/p&gt;
&lt;h2 id=&quot;Entity-Framework实体框架简介&quot;&gt;&lt;a href=&quot;#Entity-Framework实体框架简介&quot; class=&quot;headerlink&quot; title=&quot;En
      
    
    </summary>
    
      <category term="ASP.NET" scheme="https://liruisen.github.io/categories/ASP-NET/"/>
    
      <category term="MVC" scheme="https://liruisen.github.io/categories/ASP-NET/MVC/"/>
    
    
      <category term="ASP.NET MVC" scheme="https://liruisen.github.io/tags/ASP-NET-MVC/"/>
    
      <category term="EF" scheme="https://liruisen.github.io/tags/EF/"/>
    
  </entry>
  
</feed>
